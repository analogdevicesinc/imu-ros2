<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classIIOWrapper" kind="class" language="C++" prot="public">
    <compoundname>IIOWrapper</compoundname>
    <includes refid="iio__wrapper_8h" local="no">iio_wrapper.h</includes>
    <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="classIIOWrapper_1aef4fe3a3f93085da695bf65639f09b87" prot="private" static="yes" mutable="no">
        <type>struct iio_context *</type>
        <definition>struct iio_context * IIOWrapper::m_iio_context</definition>
        <argsstring></argsstring>
        <name>m_iio_context</name>
        <qualifiedname>IIOWrapper::m_iio_context</qualifiedname>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This variable retains the IIO context instance </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="1191" column="28" bodyfile="include/adi_imu/iio_wrapper.h" bodystart="1191" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classIIOWrapper_1aa54f78cb0c53f73b6562e303367b20be" prot="private" static="yes" mutable="no">
        <type>struct iio_device *</type>
        <definition>struct iio_device * IIOWrapper::m_dev</definition>
        <argsstring></argsstring>
        <name>m_dev</name>
        <qualifiedname>IIOWrapper::m_dev</qualifiedname>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This variable retains the device instance </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="1194" column="27" bodyfile="include/adi_imu/iio_wrapper.h" bodystart="1194" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classIIOWrapper_1a4c656678d45e8e978480712451b69649" prot="private" static="yes" mutable="no">
        <type>struct iio_device *</type>
        <definition>struct iio_device * IIOWrapper::m_dev_trigger</definition>
        <argsstring></argsstring>
        <name>m_dev_trigger</name>
        <qualifiedname>IIOWrapper::m_dev_trigger</qualifiedname>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This variable retains device trigger instance </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="1197" column="27" bodyfile="include/adi_imu/iio_wrapper.h" bodystart="1197" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classIIOWrapper_1ac6c3cec6da827146507437ee27296a96" prot="private" static="yes" mutable="no">
        <type>struct iio_buffer *</type>
        <definition>struct iio_buffer * IIOWrapper::m_dev_buffer</definition>
        <argsstring></argsstring>
        <name>m_dev_buffer</name>
        <qualifiedname>IIOWrapper::m_dev_buffer</qualifiedname>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This variable retains device buffer instance </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="1200" column="27" bodyfile="include/adi_imu/iio_wrapper.h" bodystart="1200" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classIIOWrapper_1ac1fb844f82d64a1b6e2e6cc6c089bd71" prot="private" static="yes" mutable="no">
        <type>struct iio_channel *</type>
        <definition>struct iio_channel * IIOWrapper::m_channel_accel_x</definition>
        <argsstring></argsstring>
        <name>m_channel_accel_x</name>
        <qualifiedname>IIOWrapper::m_channel_accel_x</qualifiedname>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This variable retains the linear acceleration x channel </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="1203" column="28" bodyfile="include/adi_imu/iio_wrapper.h" bodystart="1203" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classIIOWrapper_1ad1e0779435221c690f93d6d05a76f176" prot="private" static="yes" mutable="no">
        <type>struct iio_channel *</type>
        <definition>struct iio_channel * IIOWrapper::m_channel_accel_y</definition>
        <argsstring></argsstring>
        <name>m_channel_accel_y</name>
        <qualifiedname>IIOWrapper::m_channel_accel_y</qualifiedname>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This variable retains the linear acceleration y channel </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="1206" column="28" bodyfile="include/adi_imu/iio_wrapper.h" bodystart="1206" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classIIOWrapper_1aa5f24dc01a83090154c57359a4668cd9" prot="private" static="yes" mutable="no">
        <type>struct iio_channel *</type>
        <definition>struct iio_channel * IIOWrapper::m_channel_accel_z</definition>
        <argsstring></argsstring>
        <name>m_channel_accel_z</name>
        <qualifiedname>IIOWrapper::m_channel_accel_z</qualifiedname>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This variable retains the linear acceleration z channel </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="1209" column="28" bodyfile="include/adi_imu/iio_wrapper.h" bodystart="1209" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classIIOWrapper_1a9b7c68d2cd7161e853b261c3e1363ef3" prot="private" static="yes" mutable="no">
        <type>struct iio_channel *</type>
        <definition>struct iio_channel * IIOWrapper::m_channel_anglvel_x</definition>
        <argsstring></argsstring>
        <name>m_channel_anglvel_x</name>
        <qualifiedname>IIOWrapper::m_channel_anglvel_x</qualifiedname>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This variable retains the angular velocity x channel </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="1212" column="28" bodyfile="include/adi_imu/iio_wrapper.h" bodystart="1212" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classIIOWrapper_1a1b138c4cc8238e52a68f830363a04b8d" prot="private" static="yes" mutable="no">
        <type>struct iio_channel *</type>
        <definition>struct iio_channel * IIOWrapper::m_channel_anglvel_y</definition>
        <argsstring></argsstring>
        <name>m_channel_anglvel_y</name>
        <qualifiedname>IIOWrapper::m_channel_anglvel_y</qualifiedname>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This variable retains the angular velocity y channel </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="1215" column="28" bodyfile="include/adi_imu/iio_wrapper.h" bodystart="1215" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classIIOWrapper_1a1b2384d209272000f673f25e7134d06d" prot="private" static="yes" mutable="no">
        <type>struct iio_channel *</type>
        <definition>struct iio_channel * IIOWrapper::m_channel_anglvel_z</definition>
        <argsstring></argsstring>
        <name>m_channel_anglvel_z</name>
        <qualifiedname>IIOWrapper::m_channel_anglvel_z</qualifiedname>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This variable retains the angular velocity z channel </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="1218" column="28" bodyfile="include/adi_imu/iio_wrapper.h" bodystart="1218" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classIIOWrapper_1ae585f76ba5a1e003c9416bc87d5d7897" prot="private" static="yes" mutable="no">
        <type>struct iio_channel *</type>
        <definition>struct iio_channel * IIOWrapper::m_channel_deltaangl_x</definition>
        <argsstring></argsstring>
        <name>m_channel_deltaangl_x</name>
        <qualifiedname>IIOWrapper::m_channel_deltaangl_x</qualifiedname>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This variable retains the delta angle x channel </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="1221" column="28" bodyfile="include/adi_imu/iio_wrapper.h" bodystart="1221" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classIIOWrapper_1a60cc79165edc458ad3af03ad976feb2d" prot="private" static="yes" mutable="no">
        <type>struct iio_channel *</type>
        <definition>struct iio_channel * IIOWrapper::m_channel_deltaangl_y</definition>
        <argsstring></argsstring>
        <name>m_channel_deltaangl_y</name>
        <qualifiedname>IIOWrapper::m_channel_deltaangl_y</qualifiedname>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This variable retains the delta angle y channel </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="1224" column="28" bodyfile="include/adi_imu/iio_wrapper.h" bodystart="1224" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classIIOWrapper_1a7f9f033ffb31d35240723713a9769a6b" prot="private" static="yes" mutable="no">
        <type>struct iio_channel *</type>
        <definition>struct iio_channel * IIOWrapper::m_channel_deltaangl_z</definition>
        <argsstring></argsstring>
        <name>m_channel_deltaangl_z</name>
        <qualifiedname>IIOWrapper::m_channel_deltaangl_z</qualifiedname>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This variable retains the delta angle z channel </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="1227" column="28" bodyfile="include/adi_imu/iio_wrapper.h" bodystart="1227" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classIIOWrapper_1a13c3a4d31efdd2d329b3acc14b697aa4" prot="private" static="yes" mutable="no">
        <type>struct iio_channel *</type>
        <definition>struct iio_channel * IIOWrapper::m_channel_deltavelocity_x</definition>
        <argsstring></argsstring>
        <name>m_channel_deltavelocity_x</name>
        <qualifiedname>IIOWrapper::m_channel_deltavelocity_x</qualifiedname>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This variable retains the delta velocity x channel </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="1230" column="28" bodyfile="include/adi_imu/iio_wrapper.h" bodystart="1230" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classIIOWrapper_1a7fba21deedbdc14adf0f4a46cb59fdff" prot="private" static="yes" mutable="no">
        <type>struct iio_channel *</type>
        <definition>struct iio_channel * IIOWrapper::m_channel_deltavelocity_y</definition>
        <argsstring></argsstring>
        <name>m_channel_deltavelocity_y</name>
        <qualifiedname>IIOWrapper::m_channel_deltavelocity_y</qualifiedname>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This variable retains the delta velocity y channel </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="1233" column="28" bodyfile="include/adi_imu/iio_wrapper.h" bodystart="1233" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classIIOWrapper_1a38e16f0f6f97028d0eee31b7e98d40aa" prot="private" static="yes" mutable="no">
        <type>struct iio_channel *</type>
        <definition>struct iio_channel * IIOWrapper::m_channel_deltavelocity_z</definition>
        <argsstring></argsstring>
        <name>m_channel_deltavelocity_z</name>
        <qualifiedname>IIOWrapper::m_channel_deltavelocity_z</qualifiedname>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This variable retains the delta velocity x channel </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="1236" column="28" bodyfile="include/adi_imu/iio_wrapper.h" bodystart="1236" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classIIOWrapper_1a49a1068fef0e2c1c48096f6b88d103b7" prot="private" static="yes" mutable="no">
        <type>struct iio_channel *</type>
        <definition>struct iio_channel * IIOWrapper::m_channel_temp</definition>
        <argsstring></argsstring>
        <name>m_channel_temp</name>
        <qualifiedname>IIOWrapper::m_channel_temp</qualifiedname>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This variable retains the temperature channel </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="1239" column="28" bodyfile="include/adi_imu/iio_wrapper.h" bodystart="1239" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classIIOWrapper_1a335fdbf54f6ea1f463b4b7e9e74e0cc8" prot="private" static="yes" mutable="no">
        <type>struct iio_channel *</type>
        <definition>struct iio_channel * IIOWrapper::m_channel_timestamp</definition>
        <argsstring></argsstring>
        <name>m_channel_timestamp</name>
        <qualifiedname>IIOWrapper::m_channel_timestamp</qualifiedname>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This variable retains the timestamp channel </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="1242" column="28" bodyfile="include/adi_imu/iio_wrapper.h" bodystart="1242" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classIIOWrapper_1ac4a267304bf82229d032adf4c167c8be" prot="private" static="yes" mutable="no">
        <type>double</type>
        <definition>double IIOWrapper::m_scale_accel_x</definition>
        <argsstring></argsstring>
        <name>m_scale_accel_x</name>
        <qualifiedname>IIOWrapper::m_scale_accel_x</qualifiedname>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This variable retains the scale for the linear acceleration x raw value </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="1246" column="17" bodyfile="include/adi_imu/iio_wrapper.h" bodystart="1246" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classIIOWrapper_1a39297415934efc288f6ced765861d19d" prot="private" static="yes" mutable="no">
        <type>double</type>
        <definition>double IIOWrapper::m_scale_accel_y</definition>
        <argsstring></argsstring>
        <name>m_scale_accel_y</name>
        <qualifiedname>IIOWrapper::m_scale_accel_y</qualifiedname>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This variable retains the scale for the linear acceleration y raw value </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="1250" column="17" bodyfile="include/adi_imu/iio_wrapper.h" bodystart="1250" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classIIOWrapper_1a62c70c9017644054942d0a27c5582291" prot="private" static="yes" mutable="no">
        <type>double</type>
        <definition>double IIOWrapper::m_scale_accel_z</definition>
        <argsstring></argsstring>
        <name>m_scale_accel_z</name>
        <qualifiedname>IIOWrapper::m_scale_accel_z</qualifiedname>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This variable retains the scale for the linear acceleration z raw value </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="1254" column="17" bodyfile="include/adi_imu/iio_wrapper.h" bodystart="1254" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classIIOWrapper_1a60201aaf24995e68520d846c5446cd23" prot="private" static="yes" mutable="no">
        <type>double</type>
        <definition>double IIOWrapper::m_scale_anglvel_x</definition>
        <argsstring></argsstring>
        <name>m_scale_anglvel_x</name>
        <qualifiedname>IIOWrapper::m_scale_anglvel_x</qualifiedname>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This variable retains the scale for the angular velocity x raw value </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="1257" column="17" bodyfile="include/adi_imu/iio_wrapper.h" bodystart="1257" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classIIOWrapper_1aabb94da5ca0c007e066898cd7767f5a2" prot="private" static="yes" mutable="no">
        <type>double</type>
        <definition>double IIOWrapper::m_scale_anglvel_y</definition>
        <argsstring></argsstring>
        <name>m_scale_anglvel_y</name>
        <qualifiedname>IIOWrapper::m_scale_anglvel_y</qualifiedname>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This variable retains the scale for the angular velocity y raw value </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="1260" column="17" bodyfile="include/adi_imu/iio_wrapper.h" bodystart="1260" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classIIOWrapper_1acdb2f23b02ac0650e12b76a02502e725" prot="private" static="yes" mutable="no">
        <type>double</type>
        <definition>double IIOWrapper::m_scale_anglvel_z</definition>
        <argsstring></argsstring>
        <name>m_scale_anglvel_z</name>
        <qualifiedname>IIOWrapper::m_scale_anglvel_z</qualifiedname>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This variable retains the scale for the angular velocity z raw value </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="1263" column="17" bodyfile="include/adi_imu/iio_wrapper.h" bodystart="1263" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classIIOWrapper_1a9d05021dd126ae2446d4bfc8e122d926" prot="private" static="yes" mutable="no">
        <type>double</type>
        <definition>double IIOWrapper::m_scale_deltaangl_x</definition>
        <argsstring></argsstring>
        <name>m_scale_deltaangl_x</name>
        <qualifiedname>IIOWrapper::m_scale_deltaangl_x</qualifiedname>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This variable retains the scale for the delta angle x raw value </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="1266" column="17" bodyfile="include/adi_imu/iio_wrapper.h" bodystart="1266" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classIIOWrapper_1a0a614ad2a77e11186da5c6d22743c1cc" prot="private" static="yes" mutable="no">
        <type>double</type>
        <definition>double IIOWrapper::m_scale_deltaangl_y</definition>
        <argsstring></argsstring>
        <name>m_scale_deltaangl_y</name>
        <qualifiedname>IIOWrapper::m_scale_deltaangl_y</qualifiedname>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This variable retains the scale for the delta angle y raw value </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="1269" column="17" bodyfile="include/adi_imu/iio_wrapper.h" bodystart="1269" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classIIOWrapper_1aa60f12b53d29ad7a17750da6cfe56a9b" prot="private" static="yes" mutable="no">
        <type>double</type>
        <definition>double IIOWrapper::m_scale_deltaangl_z</definition>
        <argsstring></argsstring>
        <name>m_scale_deltaangl_z</name>
        <qualifiedname>IIOWrapper::m_scale_deltaangl_z</qualifiedname>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This variable retains the scale for the delta angle z raw value </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="1272" column="17" bodyfile="include/adi_imu/iio_wrapper.h" bodystart="1272" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classIIOWrapper_1a6b769d1cfe0c7e2f09d7af4cdbea5c09" prot="private" static="yes" mutable="no">
        <type>double</type>
        <definition>double IIOWrapper::m_scale_deltavelocity_x</definition>
        <argsstring></argsstring>
        <name>m_scale_deltavelocity_x</name>
        <qualifiedname>IIOWrapper::m_scale_deltavelocity_x</qualifiedname>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This variable retains the scale for the delta velocity x raw value </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="1275" column="17" bodyfile="include/adi_imu/iio_wrapper.h" bodystart="1275" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classIIOWrapper_1a5f29b5ac8ea9c50f38059626899f45ab" prot="private" static="yes" mutable="no">
        <type>double</type>
        <definition>double IIOWrapper::m_scale_deltavelocity_y</definition>
        <argsstring></argsstring>
        <name>m_scale_deltavelocity_y</name>
        <qualifiedname>IIOWrapper::m_scale_deltavelocity_y</qualifiedname>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This variable retains the scale for the delta velocity y raw value </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="1278" column="17" bodyfile="include/adi_imu/iio_wrapper.h" bodystart="1278" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classIIOWrapper_1a822cfeb7635264d647df73dabd2ec4d6" prot="private" static="yes" mutable="no">
        <type>double</type>
        <definition>double IIOWrapper::m_scale_deltavelocity_z</definition>
        <argsstring></argsstring>
        <name>m_scale_deltavelocity_z</name>
        <qualifiedname>IIOWrapper::m_scale_deltavelocity_z</qualifiedname>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This variable retains the scale for the delta velocity z raw value </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="1281" column="17" bodyfile="include/adi_imu/iio_wrapper.h" bodystart="1281" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classIIOWrapper_1ac33c30566920a17f9f0b20321c7bb4ae" prot="private" static="yes" mutable="no">
        <type>double</type>
        <definition>double IIOWrapper::m_scale_temp</definition>
        <argsstring></argsstring>
        <name>m_scale_temp</name>
        <qualifiedname>IIOWrapper::m_scale_temp</qualifiedname>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This variable retains the scale for the temperature raw value </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="1284" column="17" bodyfile="include/adi_imu/iio_wrapper.h" bodystart="1284" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classIIOWrapper_1ae9b4506c5a6cb9d56e36d11c3d4fc56e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>IIOWrapper::IIOWrapper</definition>
        <argsstring>()</argsstring>
        <name>IIOWrapper</name>
        <qualifiedname>IIOWrapper::IIOWrapper</qualifiedname>
        <briefdescription>
<para>Constructor for <ref refid="classIIOWrapper" kindref="compound">IIOWrapper</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="41" column="3" bodyfile="src/iio_wrapper.cpp" bodystart="100" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="classIIOWrapper_1ab4e9232cf3ba9539db8e4bfac2e0ebf0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>IIOWrapper::~IIOWrapper</definition>
        <argsstring>()</argsstring>
        <name>~IIOWrapper</name>
        <qualifiedname>IIOWrapper::~IIOWrapper</qualifiedname>
        <briefdescription>
<para>Destructor for <ref refid="classIIOWrapper" kindref="compound">IIOWrapper</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="46" column="3" bodyfile="src/iio_wrapper.cpp" bodystart="102" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="classIIOWrapper_1aa56bb91153c46ef51c3d3d53a68cc423" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int IIOWrapper::createContext</definition>
        <argsstring>(const char *context)</argsstring>
        <name>createContext</name>
        <qualifiedname>IIOWrapper::createContext</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>context</declname>
        </param>
        <briefdescription>
<para>create IIO context based on the given context string and search for IIO ADIS device, enable trigger and map device attributes, device channels and channels attributes. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>context</parametername>
</parameternamelist>
<parameterdescription>
<para>IIO context string </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ERROR code on IIO context error, 0 otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="55" column="7" bodyfile="src/iio_wrapper.cpp" bodystart="114" bodyend="258"/>
      </memberdef>
      <memberdef kind="function" id="classIIOWrapper_1ae179fe95e80ad6624c6782de04c854ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IIOWrapper::updateBuffer</definition>
        <argsstring>(uint32_t data_selection)</argsstring>
        <name>updateBuffer</name>
        <qualifiedname>IIOWrapper::updateBuffer</qualifiedname>
        <param>
          <type>uint32_t</type>
          <declname>data_selection</declname>
        </param>
        <briefdescription>
<para>Update buffer data. This function should be called before retrieving data using getBuff** APIs. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data_selection</parametername>
</parameternamelist>
<parameterdescription>
<para>0 for acceleration and gyroscope data, 1 for delta angle and delta velocity data. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Return true if data was read successfully and can be retrieved, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="65" column="8" bodyfile="src/iio_wrapper.cpp" bodystart="436" bodyend="515"/>
      </memberdef>
      <memberdef kind="function" id="classIIOWrapper_1a807ef883b1b5a6119ce4ab75d21985c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void IIOWrapper::stopBufferAcquisition</definition>
        <argsstring>()</argsstring>
        <name>stopBufferAcquisition</name>
        <qualifiedname>IIOWrapper::stopBufferAcquisition</qualifiedname>
        <briefdescription>
<para>Stops buffer acquisition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="70" column="8" bodyfile="src/iio_wrapper.cpp" bodystart="393" bodyend="399"/>
      </memberdef>
      <memberdef kind="function" id="classIIOWrapper_1a24d03c22a08baf0c5209d7f31c9d0533" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double IIOWrapper::getBuffLinearAccelerationX</definition>
        <argsstring>()</argsstring>
        <name>getBuffLinearAccelerationX</name>
        <qualifiedname>IIOWrapper::getBuffLinearAccelerationX</qualifiedname>
        <briefdescription>
<para>Get linear acceleration on x axis with buffer reads; in this case the retrieved samples are continuous if the function is called fast enough and samples are not overwritten. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Return the linear acceleration on x axis in m / s^2. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="78" column="10" bodyfile="src/iio_wrapper.cpp" bodystart="517" bodyend="520"/>
      </memberdef>
      <memberdef kind="function" id="classIIOWrapper_1a809c113401e38fdf0fc660735a2192e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double IIOWrapper::getBuffLinearAccelerationY</definition>
        <argsstring>()</argsstring>
        <name>getBuffLinearAccelerationY</name>
        <qualifiedname>IIOWrapper::getBuffLinearAccelerationY</qualifiedname>
        <briefdescription>
<para>Get linear acceleration on y axis with buffer reads; in this case the retrieved samples are continuous if the function is called fast enough and samples are not overwritten. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Return the linear acceleration on y axis in m / s^2. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="86" column="10" bodyfile="src/iio_wrapper.cpp" bodystart="522" bodyend="525"/>
      </memberdef>
      <memberdef kind="function" id="classIIOWrapper_1a41e760380fa5036a652201e2df50c889" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double IIOWrapper::getBuffLinearAccelerationZ</definition>
        <argsstring>()</argsstring>
        <name>getBuffLinearAccelerationZ</name>
        <qualifiedname>IIOWrapper::getBuffLinearAccelerationZ</qualifiedname>
        <briefdescription>
<para>Get linear acceleration on z axis with buffer reads; in this case the retrieved samples are continuous if the function is called fast enough and samples are not overwritten. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Return the linear acceleration on z axis in m / s^2. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="94" column="10" bodyfile="src/iio_wrapper.cpp" bodystart="527" bodyend="530"/>
      </memberdef>
      <memberdef kind="function" id="classIIOWrapper_1ab98be528a5805d948e0cbf8c81bdac26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double IIOWrapper::getBuffAngularVelocityX</definition>
        <argsstring>()</argsstring>
        <name>getBuffAngularVelocityX</name>
        <qualifiedname>IIOWrapper::getBuffAngularVelocityX</qualifiedname>
        <briefdescription>
<para>Get angular velocity on x axis with buffer reads; in this case the retrieved samples are continuous if the function is called fast enough and samples are not overwritten. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Return the angular velocity on x axis in rad / s. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="102" column="10" bodyfile="src/iio_wrapper.cpp" bodystart="532" bodyend="535"/>
      </memberdef>
      <memberdef kind="function" id="classIIOWrapper_1a530c457c0cd4d81951b7d174072fd75b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double IIOWrapper::getBuffAngularVelocityY</definition>
        <argsstring>()</argsstring>
        <name>getBuffAngularVelocityY</name>
        <qualifiedname>IIOWrapper::getBuffAngularVelocityY</qualifiedname>
        <briefdescription>
<para>Get angular velocity on y axis with buffer reads; in this case the retrieved samples are continuous if the function is called fast enough and samples are not overwritten. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Return the angular velocity on y axis in rad / s. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="110" column="10" bodyfile="src/iio_wrapper.cpp" bodystart="537" bodyend="540"/>
      </memberdef>
      <memberdef kind="function" id="classIIOWrapper_1a4d5286b33d41295f1cc6567f67b4d6d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double IIOWrapper::getBuffAngularVelocityZ</definition>
        <argsstring>()</argsstring>
        <name>getBuffAngularVelocityZ</name>
        <qualifiedname>IIOWrapper::getBuffAngularVelocityZ</qualifiedname>
        <briefdescription>
<para>Get angular velocity on z axis with buffer reads; in this case the retrieved samples are continuous if the function is called fast enough and samples are not overwritten. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Return the angular velocity on z axis in rad / s. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="118" column="10" bodyfile="src/iio_wrapper.cpp" bodystart="542" bodyend="545"/>
      </memberdef>
      <memberdef kind="function" id="classIIOWrapper_1a8636bc7c28c829538d05d5bb638c9074" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double IIOWrapper::getBuffTemperature</definition>
        <argsstring>()</argsstring>
        <name>getBuffTemperature</name>
        <qualifiedname>IIOWrapper::getBuffTemperature</qualifiedname>
        <briefdescription>
<para>Get temperature with buffer reads; in this case the retrieved samples are continuous if the function is called fast enough and samples are not overwritten. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Return the temperature in degrees Celsius. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="176" column="10" bodyfile="src/iio_wrapper.cpp" bodystart="622" bodyend="625"/>
      </memberdef>
      <memberdef kind="function" id="classIIOWrapper_1a4a4cea0c85854aef0117ce98a587b8b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void IIOWrapper::getBuffSampleTimestamp</definition>
        <argsstring>(int32_t &amp;sec, uint32_t &amp;nanosec)</argsstring>
        <name>getBuffSampleTimestamp</name>
        <qualifiedname>IIOWrapper::getBuffSampleTimestamp</qualifiedname>
        <param>
          <type>int32_t &amp;</type>
          <declname>sec</declname>
        </param>
        <param>
          <type>uint32_t &amp;</type>
          <declname>nanosec</declname>
        </param>
        <briefdescription>
<para>Get buffer timestamp when performing buffer reads; the timestamp represent the time at which the samples from the devices were read over SPI. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sec</parametername>
</parameternamelist>
<parameterdescription>
<para>The second component of the timestamp </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nanosec</parametername>
</parameternamelist>
<parameterdescription>
<para>The nanosecond component of the timestamp </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="185" column="8" bodyfile="src/iio_wrapper.cpp" bodystart="627" bodyend="644"/>
      </memberdef>
      <memberdef kind="function" id="classIIOWrapper_1ad1c329ac2d3785a4c4ceee754d5b1c7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IIOWrapper::getConvertedLinearAccelerationX</definition>
        <argsstring>(double &amp;result)</argsstring>
        <name>getConvertedLinearAccelerationX</name>
        <qualifiedname>IIOWrapper::getConvertedLinearAccelerationX</qualifiedname>
        <param>
          <type>double &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Get linear acceleration on x axis with register reads; in this case the retrieved samples are not necessary continuous. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Return true if the reading was successful and result is valid, false otherwise. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>The linear acceleration on x axis in m / s^2. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="194" column="8" bodyfile="src/iio_wrapper.cpp" bodystart="646" bodyend="656"/>
      </memberdef>
      <memberdef kind="function" id="classIIOWrapper_1a798839e37670a3ee83381c3b8e7bee9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IIOWrapper::getConvertedLinearAccelerationY</definition>
        <argsstring>(double &amp;result)</argsstring>
        <name>getConvertedLinearAccelerationY</name>
        <qualifiedname>IIOWrapper::getConvertedLinearAccelerationY</qualifiedname>
        <param>
          <type>double &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Get linear acceleration on y axis with register reads; in this case the retrieved samples are not necessary continuous. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Return true if the reading was successful and result is valid, false otherwise. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>The linear acceleration on y axis in m / s^2. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="203" column="8" bodyfile="src/iio_wrapper.cpp" bodystart="658" bodyend="668"/>
      </memberdef>
      <memberdef kind="function" id="classIIOWrapper_1a63262c6685e600d505fc751db4f52f4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IIOWrapper::getConvertedLinearAccelerationZ</definition>
        <argsstring>(double &amp;result)</argsstring>
        <name>getConvertedLinearAccelerationZ</name>
        <qualifiedname>IIOWrapper::getConvertedLinearAccelerationZ</qualifiedname>
        <param>
          <type>double &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Get linear acceleration on z axis with register reads; in this case the retrieved samples are not necessary continuous. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Return true if the reading was successful and result is valid, false otherwise. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>The linear acceleration on z axis in m / s^2. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="212" column="8" bodyfile="src/iio_wrapper.cpp" bodystart="670" bodyend="680"/>
      </memberdef>
      <memberdef kind="function" id="classIIOWrapper_1a188e946663bc7b97c34051307f4d5d27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IIOWrapper::getConvertedAngularVelocityX</definition>
        <argsstring>(double &amp;result)</argsstring>
        <name>getConvertedAngularVelocityX</name>
        <qualifiedname>IIOWrapper::getConvertedAngularVelocityX</qualifiedname>
        <param>
          <type>double &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Get angular velocity on x axis with register reads; in this case the retrieved samples are not necessary continuous. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Return true if the reading was successful and result is valid, false otherwise. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>The angular velocity on x axis in rad / s. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="221" column="8" bodyfile="src/iio_wrapper.cpp" bodystart="682" bodyend="692"/>
      </memberdef>
      <memberdef kind="function" id="classIIOWrapper_1a1f3f03307a91115e17ee3f18323f061a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IIOWrapper::getConvertedAngularVelocityY</definition>
        <argsstring>(double &amp;result)</argsstring>
        <name>getConvertedAngularVelocityY</name>
        <qualifiedname>IIOWrapper::getConvertedAngularVelocityY</qualifiedname>
        <param>
          <type>double &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Get angular velocity on y axis with register reads; in this case the retrieved samples are not necessary continuous. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Return true if the reading was successful and result is valid, false otherwise. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>The angular velocity on y axis in rad / s. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="230" column="8" bodyfile="src/iio_wrapper.cpp" bodystart="694" bodyend="704"/>
      </memberdef>
      <memberdef kind="function" id="classIIOWrapper_1adc9f70fada12dbe6e110a8bcddf6c539" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IIOWrapper::getConvertedAngularVelocityZ</definition>
        <argsstring>(double &amp;result)</argsstring>
        <name>getConvertedAngularVelocityZ</name>
        <qualifiedname>IIOWrapper::getConvertedAngularVelocityZ</qualifiedname>
        <param>
          <type>double &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Get angular velocity on z axis with register reads; in this case the retrieved samples are not necessary continuous. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Return true if the reading was successful and result is valid, false otherwise. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>The angular velocity on z axis in rad / s. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="239" column="8" bodyfile="src/iio_wrapper.cpp" bodystart="706" bodyend="716"/>
      </memberdef>
      <memberdef kind="function" id="classIIOWrapper_1a68420aad14da02a7fd8316b6c7853c03" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IIOWrapper::getConvertedDeltaAngleX</definition>
        <argsstring>(double &amp;result)</argsstring>
        <name>getConvertedDeltaAngleX</name>
        <qualifiedname>IIOWrapper::getConvertedDeltaAngleX</qualifiedname>
        <param>
          <type>double &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Get delta angle on x axis with register reads; in this case the retrieved samples are not necessary continuous. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Return true if the reading was successful and result is valid, false otherwise. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>The delta angle on x axis in radians. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="248" column="8" bodyfile="src/iio_wrapper.cpp" bodystart="747" bodyend="757"/>
      </memberdef>
      <memberdef kind="function" id="classIIOWrapper_1a58453b95cb9193b5b2813fd3c1f5e4d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IIOWrapper::getConvertedDeltaAngleY</definition>
        <argsstring>(double &amp;result)</argsstring>
        <name>getConvertedDeltaAngleY</name>
        <qualifiedname>IIOWrapper::getConvertedDeltaAngleY</qualifiedname>
        <param>
          <type>double &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Get delta angle on y axis with register reads; in this case the retrieved samples are not necessary continuous. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Return true if the reading was successful and result is valid, false otherwise. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>The delta angle on y axis in radians. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="257" column="8" bodyfile="src/iio_wrapper.cpp" bodystart="788" bodyend="798"/>
      </memberdef>
      <memberdef kind="function" id="classIIOWrapper_1a29160e4f1947315e1862bf1c1a0630bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IIOWrapper::getConvertedDeltaAngleZ</definition>
        <argsstring>(double &amp;result)</argsstring>
        <name>getConvertedDeltaAngleZ</name>
        <qualifiedname>IIOWrapper::getConvertedDeltaAngleZ</qualifiedname>
        <param>
          <type>double &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Get delta angle on z axis with register reads; in this case the retrieved samples are not necessary continuous. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Return true if the reading was successful and result is valid, false otherwise. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>The delta angle on z axis in radians. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="266" column="8" bodyfile="src/iio_wrapper.cpp" bodystart="829" bodyend="839"/>
      </memberdef>
      <memberdef kind="function" id="classIIOWrapper_1a6ef7ac4cd9d2b1b7e0cd9a7a44e6dd35" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IIOWrapper::getConvertedDeltaVelocityX</definition>
        <argsstring>(double &amp;result)</argsstring>
        <name>getConvertedDeltaVelocityX</name>
        <qualifiedname>IIOWrapper::getConvertedDeltaVelocityX</qualifiedname>
        <param>
          <type>double &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Get delta velocity on x axis with register reads; in this case the retrieved samples are not necessary continuous. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Return true if the reading was successful and result is valid, false otherwise. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>The delta velocity on x axis in m / s. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="275" column="8" bodyfile="src/iio_wrapper.cpp" bodystart="870" bodyend="880"/>
      </memberdef>
      <memberdef kind="function" id="classIIOWrapper_1ad566dd23cded258dea92a16a88946902" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IIOWrapper::getConvertedDeltaVelocityY</definition>
        <argsstring>(double &amp;result)</argsstring>
        <name>getConvertedDeltaVelocityY</name>
        <qualifiedname>IIOWrapper::getConvertedDeltaVelocityY</qualifiedname>
        <param>
          <type>double &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Get delta velocity on y axis with register reads; in this case the retrieved samples are not necessary continuous. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Return true if the reading was successful and result is valid, false otherwise. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>The delta velocity on y axis in m / s. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="284" column="8" bodyfile="src/iio_wrapper.cpp" bodystart="911" bodyend="921"/>
      </memberdef>
      <memberdef kind="function" id="classIIOWrapper_1a31a1dc7c03fc782b2eff9ae0f925e789" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IIOWrapper::getConvertedDeltaVelocityZ</definition>
        <argsstring>(double &amp;result)</argsstring>
        <name>getConvertedDeltaVelocityZ</name>
        <qualifiedname>IIOWrapper::getConvertedDeltaVelocityZ</qualifiedname>
        <param>
          <type>double &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Get delta velocity on z axis with register reads; in this case the retrieved samples are not necessary continuous. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Return true if the reading was successful and result is valid, false otherwise. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>The delta velocity on z axis in m / s. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="293" column="8" bodyfile="src/iio_wrapper.cpp" bodystart="952" bodyend="962"/>
      </memberdef>
      <memberdef kind="function" id="classIIOWrapper_1a23f8fbda995629b864dc72bcf3ba0984" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IIOWrapper::getConvertedTemperature</definition>
        <argsstring>(double &amp;result)</argsstring>
        <name>getConvertedTemperature</name>
        <qualifiedname>IIOWrapper::getConvertedTemperature</qualifiedname>
        <param>
          <type>double &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Get temperature with register reads; in this case the retrieved samples are not necessary continuous. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Return true if the reading was successful and result is valid, false otherwise. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>The temperature in degrees Celsius. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="302" column="8" bodyfile="src/iio_wrapper.cpp" bodystart="964" bodyend="974"/>
      </memberdef>
      <memberdef kind="function" id="classIIOWrapper_1a2cc98e4d4a651e82c7d5766f824acebd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IIOWrapper::anglvel_x_calibbias</definition>
        <argsstring>(int32_t &amp;result)</argsstring>
        <name>anglvel_x_calibbias</name>
        <qualifiedname>IIOWrapper::anglvel_x_calibbias</qualifiedname>
        <param>
          <type>int32_t &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Get angular velocity calibration offset on x axis. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>angular velocity calibration offset on x axis. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Return true if reading was successful and data is valid, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="310" column="8" bodyfile="src/iio_wrapper.cpp" bodystart="976" bodyend="986"/>
      </memberdef>
      <memberdef kind="function" id="classIIOWrapper_1a09fa5c163037f078a83e813ef13f73e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IIOWrapper::update_anglvel_calibbias_x</definition>
        <argsstring>(int32_t val)</argsstring>
        <name>update_anglvel_calibbias_x</name>
        <qualifiedname>IIOWrapper::update_anglvel_calibbias_x</qualifiedname>
        <param>
          <type>int32_t</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Update angular velocity calibration offset on x axis. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>value to update with. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Return true if writing was with success and false if not. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="318" column="8" bodyfile="src/iio_wrapper.cpp" bodystart="988" bodyend="993"/>
      </memberdef>
      <memberdef kind="function" id="classIIOWrapper_1aafec41ed9294cf0ef6ac0afaf350188e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IIOWrapper::anglvel_y_calibbias</definition>
        <argsstring>(int32_t &amp;result)</argsstring>
        <name>anglvel_y_calibbias</name>
        <qualifiedname>IIOWrapper::anglvel_y_calibbias</qualifiedname>
        <param>
          <type>int32_t &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Get angular velocity calibration offset on y axis. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>angular velocity calibration offset on y axis. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Return true if reading was successful and data is valid, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="326" column="8" bodyfile="src/iio_wrapper.cpp" bodystart="995" bodyend="1005"/>
      </memberdef>
      <memberdef kind="function" id="classIIOWrapper_1a3730f3c7dcea63f4e2104a02c1e695ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IIOWrapper::update_anglvel_calibbias_y</definition>
        <argsstring>(int32_t val)</argsstring>
        <name>update_anglvel_calibbias_y</name>
        <qualifiedname>IIOWrapper::update_anglvel_calibbias_y</qualifiedname>
        <param>
          <type>int32_t</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Update angular velocity calibration offset on y axis. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>value to update with. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Return true if writing was with success and false if not. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="334" column="8" bodyfile="src/iio_wrapper.cpp" bodystart="1007" bodyend="1012"/>
      </memberdef>
      <memberdef kind="function" id="classIIOWrapper_1a84a5ecfbf0942fa175703f1a0aee8bcd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IIOWrapper::anglvel_z_calibbias</definition>
        <argsstring>(int32_t &amp;result)</argsstring>
        <name>anglvel_z_calibbias</name>
        <qualifiedname>IIOWrapper::anglvel_z_calibbias</qualifiedname>
        <param>
          <type>int32_t &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Get angular velocity calibration offset on z axis. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>angular velocity calibration offset on z axis. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Return true if reading was successful and data is valid, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="342" column="8" bodyfile="src/iio_wrapper.cpp" bodystart="1014" bodyend="1024"/>
      </memberdef>
      <memberdef kind="function" id="classIIOWrapper_1a640785a86e54405eecad55a93321bc26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IIOWrapper::update_anglvel_calibbias_z</definition>
        <argsstring>(int32_t val)</argsstring>
        <name>update_anglvel_calibbias_z</name>
        <qualifiedname>IIOWrapper::update_anglvel_calibbias_z</qualifiedname>
        <param>
          <type>int32_t</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Update angular velocity calibration offset on z axis. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>value to update with. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Return true if writing was with success and false if not. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="350" column="8" bodyfile="src/iio_wrapper.cpp" bodystart="1026" bodyend="1031"/>
      </memberdef>
      <memberdef kind="function" id="classIIOWrapper_1a45cbee4a2eaf700b7396a4df956ed7e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IIOWrapper::accel_x_calibbias</definition>
        <argsstring>(int32_t &amp;result)</argsstring>
        <name>accel_x_calibbias</name>
        <qualifiedname>IIOWrapper::accel_x_calibbias</qualifiedname>
        <param>
          <type>int32_t &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Get linear acceleration calibration offset on x axis. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>linear acceleration calibration offset on x axis. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Return true if reading was successful and data is valid, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="358" column="8" bodyfile="src/iio_wrapper.cpp" bodystart="1033" bodyend="1043"/>
      </memberdef>
      <memberdef kind="function" id="classIIOWrapper_1a371075c2f73786fc409dbfe11bb9b68f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IIOWrapper::update_accel_calibbias_x</definition>
        <argsstring>(int32_t val)</argsstring>
        <name>update_accel_calibbias_x</name>
        <qualifiedname>IIOWrapper::update_accel_calibbias_x</qualifiedname>
        <param>
          <type>int32_t</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Update linear acceleration calibration offset on x axis. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>value to update with. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Return true if writing was with success and false if not. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="366" column="8" bodyfile="src/iio_wrapper.cpp" bodystart="1045" bodyend="1050"/>
      </memberdef>
      <memberdef kind="function" id="classIIOWrapper_1ab069f082479643718588962ed76e48e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IIOWrapper::accel_y_calibbias</definition>
        <argsstring>(int32_t &amp;result)</argsstring>
        <name>accel_y_calibbias</name>
        <qualifiedname>IIOWrapper::accel_y_calibbias</qualifiedname>
        <param>
          <type>int32_t &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Get linear acceleration calibration offset on y axis. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>linear acceleration calibration offset on y axis. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Return true if reading was successful and data is valid, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="374" column="8" bodyfile="src/iio_wrapper.cpp" bodystart="1052" bodyend="1062"/>
      </memberdef>
      <memberdef kind="function" id="classIIOWrapper_1a6b81ddc7f9f7c67b15e4f8be594c0926" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IIOWrapper::update_accel_calibbias_y</definition>
        <argsstring>(int32_t val)</argsstring>
        <name>update_accel_calibbias_y</name>
        <qualifiedname>IIOWrapper::update_accel_calibbias_y</qualifiedname>
        <param>
          <type>int32_t</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Update linear acceleration calibration offset on y axis. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>value to update with. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Return true if writing was with success and false if not. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="382" column="8" bodyfile="src/iio_wrapper.cpp" bodystart="1064" bodyend="1069"/>
      </memberdef>
      <memberdef kind="function" id="classIIOWrapper_1a777c78d431b5fc16088018b52ffa8d3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IIOWrapper::accel_z_calibbias</definition>
        <argsstring>(int32_t &amp;result)</argsstring>
        <name>accel_z_calibbias</name>
        <qualifiedname>IIOWrapper::accel_z_calibbias</qualifiedname>
        <param>
          <type>int32_t &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Get linear acceleration calibration offset on z axis. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>linear acceleration calibration offset on z axis. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Return true if reading was successful and data is valid, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="390" column="8" bodyfile="src/iio_wrapper.cpp" bodystart="1071" bodyend="1081"/>
      </memberdef>
      <memberdef kind="function" id="classIIOWrapper_1a4265bcbf41f4c0582e08f30f5ab63eca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IIOWrapper::update_accel_calibbias_z</definition>
        <argsstring>(int32_t val)</argsstring>
        <name>update_accel_calibbias_z</name>
        <qualifiedname>IIOWrapper::update_accel_calibbias_z</qualifiedname>
        <param>
          <type>int32_t</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Update linear acceleration calibration offset on z axis. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>value to update with. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Return true if writing was with success and false if not. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="398" column="8" bodyfile="src/iio_wrapper.cpp" bodystart="1083" bodyend="1088"/>
      </memberdef>
      <memberdef kind="function" id="classIIOWrapper_1aee4ed59f8c41d2c1e1ad95d5179e0e61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IIOWrapper::filter_low_pass_3db_frequency</definition>
        <argsstring>(uint32_t &amp;result)</argsstring>
        <name>filter_low_pass_3db_frequency</name>
        <qualifiedname>IIOWrapper::filter_low_pass_3db_frequency</qualifiedname>
        <param>
          <type>uint32_t &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Get low pass 3db frequency data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>low pass 3db frequency value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Return true if reading was successful and data is valid, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="498" column="8" bodyfile="src/iio_wrapper.cpp" bodystart="1244" bodyend="1255"/>
      </memberdef>
      <memberdef kind="function" id="classIIOWrapper_1ab960b56f3b8fb3bab2f4d3e492616bca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IIOWrapper::update_filter_low_pass_3db_frequency</definition>
        <argsstring>(uint32_t val)</argsstring>
        <name>update_filter_low_pass_3db_frequency</name>
        <qualifiedname>IIOWrapper::update_filter_low_pass_3db_frequency</qualifiedname>
        <param>
          <type>uint32_t</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Update low pass 3db frequency. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>value to update with. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Return true if writing was with success and false if not. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="506" column="8" bodyfile="src/iio_wrapper.cpp" bodystart="1257" bodyend="1262"/>
      </memberdef>
      <memberdef kind="function" id="classIIOWrapper_1ac8584252d4635e9a3c00f464cc176b17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IIOWrapper::sampling_frequency</definition>
        <argsstring>(double *result)</argsstring>
        <name>sampling_frequency</name>
        <qualifiedname>IIOWrapper::sampling_frequency</qualifiedname>
        <param>
          <type>double *</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Get sampling frequency. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>current set sampling frequency </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Return true if reading was successful and data is valid, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="604" column="8" bodyfile="src/iio_wrapper.cpp" bodystart="1090" bodyend="1102"/>
      </memberdef>
      <memberdef kind="function" id="classIIOWrapper_1a5cf1f0bfc5f5f0cf43c9707f399c2001" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IIOWrapper::update_sampling_frequency</definition>
        <argsstring>(double val)</argsstring>
        <name>update_sampling_frequency</name>
        <qualifiedname>IIOWrapper::update_sampling_frequency</qualifiedname>
        <param>
          <type>double</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Update sampling frequency. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>value to update with. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Return true if writing was with success and false if not. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="612" column="8" bodyfile="src/iio_wrapper.cpp" bodystart="1104" bodyend="1116"/>
      </memberdef>
      <memberdef kind="function" id="classIIOWrapper_1ac818ead3ccd5f2a7c8ab59f5464cff9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IIOWrapper::diag_sensor_initialization_failure</definition>
        <argsstring>(bool &amp;result)</argsstring>
        <name>diag_sensor_initialization_failure</name>
        <qualifiedname>IIOWrapper::diag_sensor_initialization_failure</qualifiedname>
        <param>
          <type>bool &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Get diag sensor initialization failure data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>True if failure occurred, false otherwise. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Return true if reading was successful and data is valid, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="620" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classIIOWrapper_1aacdab905284a0a6ecabb1b9bcad81be9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IIOWrapper::diag_data_path_overrun</definition>
        <argsstring>(bool &amp;result)</argsstring>
        <name>diag_data_path_overrun</name>
        <qualifiedname>IIOWrapper::diag_data_path_overrun</qualifiedname>
        <param>
          <type>bool &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Get diag data path overrun data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>True if failure occurred, false otherwise. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Return true if reading was successful and data is valid, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="628" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classIIOWrapper_1aa81282a7f07974ef69c65711200f5d7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IIOWrapper::diag_automatic_reset</definition>
        <argsstring>(bool &amp;result)</argsstring>
        <name>diag_automatic_reset</name>
        <qualifiedname>IIOWrapper::diag_automatic_reset</qualifiedname>
        <param>
          <type>bool &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Get automatic reset data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>True if device reset has occured </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true Return true if reading was successful and data is valid, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="636" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classIIOWrapper_1a9950dc38bc1e56a7fc42d36b50a3e718" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IIOWrapper::diag_flash_memory_update_error</definition>
        <argsstring>(bool &amp;result)</argsstring>
        <name>diag_flash_memory_update_error</name>
        <qualifiedname>IIOWrapper::diag_flash_memory_update_error</qualifiedname>
        <param>
          <type>bool &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Get diag flash memory update_error data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>True if failure occurred, false otherwise. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Return true if reading was successful and data is valid, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="644" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classIIOWrapper_1a1d23815c0de4a1ad4366602a4f4bdd96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IIOWrapper::diag_spi_communication_error</definition>
        <argsstring>(bool &amp;result)</argsstring>
        <name>diag_spi_communication_error</name>
        <qualifiedname>IIOWrapper::diag_spi_communication_error</qualifiedname>
        <param>
          <type>bool &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Get diag spi communication error data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>True if failure occurred, false otherwise. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Return true if reading was successful and data is valid, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="652" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classIIOWrapper_1a11b581d355f708591f0e425507d93164" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IIOWrapper::diag_crc_error</definition>
        <argsstring>(bool &amp;result)</argsstring>
        <name>diag_crc_error</name>
        <qualifiedname>IIOWrapper::diag_crc_error</qualifiedname>
        <param>
          <type>bool &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Get diag crc error. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>True if calculation failure occurred in a CRC </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Return true if reading was successful and data is valid, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="660" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classIIOWrapper_1a88df8843b74de7c177dada4d61708fc4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IIOWrapper::diag_standby_mode</definition>
        <argsstring>(bool &amp;result)</argsstring>
        <name>diag_standby_mode</name>
        <qualifiedname>IIOWrapper::diag_standby_mode</qualifiedname>
        <param>
          <type>bool &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Get diag standby mode data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>True if device is in standby mode, false otherwise. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Return true if reading was successful and data is valid, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="668" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classIIOWrapper_1a6c7b7b8d0039a24ed6be2ce7b15fc814" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IIOWrapper::diag_sensor_self_test_error</definition>
        <argsstring>(bool &amp;result)</argsstring>
        <name>diag_sensor_self_test_error</name>
        <qualifiedname>IIOWrapper::diag_sensor_self_test_error</qualifiedname>
        <param>
          <type>bool &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Get diag sensor self test error data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>True if failure occurred, false otherwise. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Return true if reading was successful and data is valid, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="676" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classIIOWrapper_1a39396f6d69a04202f9e859922f95fc34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IIOWrapper::diag_flash_memory_test_error</definition>
        <argsstring>(bool &amp;result)</argsstring>
        <name>diag_flash_memory_test_error</name>
        <qualifiedname>IIOWrapper::diag_flash_memory_test_error</qualifiedname>
        <param>
          <type>bool &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Get diag flash memory test error data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>True if failure occurred, false otherwise. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Return true if reading was successful and data is valid, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="684" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classIIOWrapper_1a09e0a223d200b7d2ed1731f06635b370" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IIOWrapper::diag_clock_error</definition>
        <argsstring>(bool &amp;result)</argsstring>
        <name>diag_clock_error</name>
        <qualifiedname>IIOWrapper::diag_clock_error</qualifiedname>
        <param>
          <type>bool &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Get diag clock error data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>True if failure occurred, false otherwise. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Return true if reading was successful and data is valid, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="692" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classIIOWrapper_1aea94b1e579314660c7dd03d82ee4c29f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IIOWrapper::diag_gyroscope1_self_test_error</definition>
        <argsstring>(bool &amp;result)</argsstring>
        <name>diag_gyroscope1_self_test_error</name>
        <qualifiedname>IIOWrapper::diag_gyroscope1_self_test_error</qualifiedname>
        <param>
          <type>bool &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Get diag gyroscope1 self test error data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>True if failure occurred, false otherwise. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Return true if reading was successful and data is valid, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="700" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classIIOWrapper_1aa85c0d7dbb01ff4201678d687b8adf93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IIOWrapper::diag_gyroscope2_self_test_error</definition>
        <argsstring>(bool &amp;result)</argsstring>
        <name>diag_gyroscope2_self_test_error</name>
        <qualifiedname>IIOWrapper::diag_gyroscope2_self_test_error</qualifiedname>
        <param>
          <type>bool &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Get diag gyroscope2 self test error data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>True if failure occurred, false otherwise. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Return true if reading was successful and data is valid, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="708" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classIIOWrapper_1a6f0b68bf91bb6bd000a570b349a4e9f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IIOWrapper::diag_acceleration_self_test_error</definition>
        <argsstring>(bool &amp;result)</argsstring>
        <name>diag_acceleration_self_test_error</name>
        <qualifiedname>IIOWrapper::diag_acceleration_self_test_error</qualifiedname>
        <param>
          <type>bool &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Get diag acceleration self test error data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>True if failure occurred, false otherwise. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Return true if reading was successful and data is valid, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="716" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classIIOWrapper_1a45143fbc3eba8260f9cda6870c704d19" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IIOWrapper::diag_x_axis_gyroscope_failure</definition>
        <argsstring>(bool &amp;result)</argsstring>
        <name>diag_x_axis_gyroscope_failure</name>
        <qualifiedname>IIOWrapper::diag_x_axis_gyroscope_failure</qualifiedname>
        <param>
          <type>bool &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Get diag x axis gyroscope failure data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>True if failure occurred, false otherwise. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Return true if reading was successful and data is valid, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="724" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classIIOWrapper_1ab027802372011c7f7d9f59061017173c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IIOWrapper::diag_y_axis_gyroscope_failure</definition>
        <argsstring>(bool &amp;result)</argsstring>
        <name>diag_y_axis_gyroscope_failure</name>
        <qualifiedname>IIOWrapper::diag_y_axis_gyroscope_failure</qualifiedname>
        <param>
          <type>bool &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Get diag y axis gyroscope failure data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>True if failure occurred, false otherwise. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Return true if reading was successful and data is valid, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="732" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classIIOWrapper_1adc4a32825bc5982131f53e227805946b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IIOWrapper::diag_z_axis_gyroscope_failure</definition>
        <argsstring>(bool &amp;result)</argsstring>
        <name>diag_z_axis_gyroscope_failure</name>
        <qualifiedname>IIOWrapper::diag_z_axis_gyroscope_failure</qualifiedname>
        <param>
          <type>bool &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Get diag z axis gyroscope failure data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>True if failure occurred, false otherwise. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Return true if reading was successful and data is valid, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="740" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classIIOWrapper_1afd7976cbd87ab425eb6fdf1192e39e1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IIOWrapper::diag_x_axis_accelerometer_failure</definition>
        <argsstring>(bool &amp;result)</argsstring>
        <name>diag_x_axis_accelerometer_failure</name>
        <qualifiedname>IIOWrapper::diag_x_axis_accelerometer_failure</qualifiedname>
        <param>
          <type>bool &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Get diag x axis accelerometer failure data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>True if failure occurred, false otherwise. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Return true if reading was successful and data is valid, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="748" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classIIOWrapper_1a5e040011fba86b221a028f96440ac59e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IIOWrapper::diag_y_axis_accelerometer_failure</definition>
        <argsstring>(bool &amp;result)</argsstring>
        <name>diag_y_axis_accelerometer_failure</name>
        <qualifiedname>IIOWrapper::diag_y_axis_accelerometer_failure</qualifiedname>
        <param>
          <type>bool &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Get diag y axis accelerometer failure data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>True if failure occurred, false otherwise. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Return true if reading was successful and data is valid, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="756" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classIIOWrapper_1adf039156a53b8bb0afebe4c48507c097" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IIOWrapper::diag_z_axis_accelerometer_failure</definition>
        <argsstring>(bool &amp;result)</argsstring>
        <name>diag_z_axis_accelerometer_failure</name>
        <qualifiedname>IIOWrapper::diag_z_axis_accelerometer_failure</qualifiedname>
        <param>
          <type>bool &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Get diag z axis accelerometer failure data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>True if failure occurred, false otherwise. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Return true if reading was successful and data is valid, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="764" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classIIOWrapper_1aa691849d0baa2fad55deb7975a070734" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IIOWrapper::diag_aduc_mcu_fault</definition>
        <argsstring>(bool &amp;result)</argsstring>
        <name>diag_aduc_mcu_fault</name>
        <qualifiedname>IIOWrapper::diag_aduc_mcu_fault</qualifiedname>
        <param>
          <type>bool &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Get diag aduc mcu fault data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>True if failure occurred, false otherwise. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Return true if reading was successful and data is valid, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="772" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classIIOWrapper_1ab3a551d7da672e3c5d3cce79aac4a37c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IIOWrapper::diag_flash_memory_write_count_exceeded_error</definition>
        <argsstring>(bool &amp;result)</argsstring>
        <name>diag_flash_memory_write_count_exceeded_error</name>
        <qualifiedname>IIOWrapper::diag_flash_memory_write_count_exceeded_error</qualifiedname>
        <param>
          <type>bool &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Get diag flash memory write count exceeded error data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>True if write count exceeded allowed value, false otherwise. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Return true if reading was successful and data is valid, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="780" column="8" bodyfile="src/iio_wrapper.cpp" bodystart="1725" bodyend="1733"/>
      </memberdef>
      <memberdef kind="function" id="classIIOWrapper_1aa3dfbe95f0013016b8b5056b73d1f126" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IIOWrapper::gyroscope_measurement_range</definition>
        <argsstring>(std::string &amp;result)</argsstring>
        <name>gyroscope_measurement_range</name>
        <qualifiedname>IIOWrapper::gyroscope_measurement_range</qualifiedname>
        <param>
          <type>std::string &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Get gyroscope measurement range data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>gyroscope measurement range data. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Return true if reading was successful and data is valid, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="788" column="8" bodyfile="src/iio_wrapper.cpp" bodystart="1735" bodyend="1767"/>
      </memberdef>
      <memberdef kind="function" id="classIIOWrapper_1a25e63a463289dc1c7761e9ef14982cbf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IIOWrapper::internal_sensor_bandwidth</definition>
        <argsstring>(uint32_t &amp;result)</argsstring>
        <name>internal_sensor_bandwidth</name>
        <qualifiedname>IIOWrapper::internal_sensor_bandwidth</qualifiedname>
        <param>
          <type>uint32_t &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Get internal sensor bandwidth data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>internal sensor bandwidth data. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Return true if reading was successful and data is valid, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="796" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classIIOWrapper_1a630b1d5232285b51560a90b805339961" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IIOWrapper::update_internal_sensor_bandwidth</definition>
        <argsstring>(uint32_t val)</argsstring>
        <name>update_internal_sensor_bandwidth</name>
        <qualifiedname>IIOWrapper::update_internal_sensor_bandwidth</qualifiedname>
        <param>
          <type>uint32_t</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Update internal sensor bandwidth. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>value to update with. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Return true if writing was with success and false if not. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="804" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classIIOWrapper_1a67eaded963621b47f1f228a0b250a00e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IIOWrapper::point_of_percussion_alignment</definition>
        <argsstring>(uint32_t &amp;result)</argsstring>
        <name>point_of_percussion_alignment</name>
        <qualifiedname>IIOWrapper::point_of_percussion_alignment</qualifiedname>
        <param>
          <type>uint32_t &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Get point of percussion alignment data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>point of percussion alignment data. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Return true if reading was successful and data is valid, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="812" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classIIOWrapper_1a293d23f39cf1a07b3e8056d239728dc3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IIOWrapper::update_point_of_percussion_alignment</definition>
        <argsstring>(uint32_t val)</argsstring>
        <name>update_point_of_percussion_alignment</name>
        <qualifiedname>IIOWrapper::update_point_of_percussion_alignment</qualifiedname>
        <param>
          <type>uint32_t</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Update point of percussion alignment. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>value to update with. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Return true if writing was with success and false if not. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="820" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classIIOWrapper_1a2352785dfb0a0324613bd6f99a27831b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IIOWrapper::linear_acceleration_compensation</definition>
        <argsstring>(uint32_t &amp;result)</argsstring>
        <name>linear_acceleration_compensation</name>
        <qualifiedname>IIOWrapper::linear_acceleration_compensation</qualifiedname>
        <param>
          <type>uint32_t &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Get linear acceleration compensation data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>linear acceleration compensation data. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Return true if reading was successful and data is valid, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="828" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classIIOWrapper_1a09fe16394d6d8b7a7ab7dbefa64ba084" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IIOWrapper::update_linear_acceleration_compensation</definition>
        <argsstring>(uint32_t val)</argsstring>
        <name>update_linear_acceleration_compensation</name>
        <qualifiedname>IIOWrapper::update_linear_acceleration_compensation</qualifiedname>
        <param>
          <type>uint32_t</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Update linear acceleration compensation. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>value to update with. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Return true if writing was with success and false if not. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="836" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classIIOWrapper_1a4b0d75039f36c1063c12c2335c230ffd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IIOWrapper::bias_correction_time_base_control</definition>
        <argsstring>(uint32_t &amp;result)</argsstring>
        <name>bias_correction_time_base_control</name>
        <qualifiedname>IIOWrapper::bias_correction_time_base_control</qualifiedname>
        <param>
          <type>uint32_t &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Get bias correction time base control data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>bias correction time base control data. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Return true if reading was successful and data is valid, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="844" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classIIOWrapper_1a5818afde806f78c0868884d6b1f23bbf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IIOWrapper::update_bias_correction_time_base_control</definition>
        <argsstring>(uint32_t val)</argsstring>
        <name>update_bias_correction_time_base_control</name>
        <qualifiedname>IIOWrapper::update_bias_correction_time_base_control</qualifiedname>
        <param>
          <type>uint32_t</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Update bias correction time base control. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>value to update with. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Return true if writing was with success and false if not. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="852" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classIIOWrapper_1ab0d834e0075c408c546991934ac4ac7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IIOWrapper::x_axis_gyroscope_bias_correction_enable</definition>
        <argsstring>(uint32_t &amp;result)</argsstring>
        <name>x_axis_gyroscope_bias_correction_enable</name>
        <qualifiedname>IIOWrapper::x_axis_gyroscope_bias_correction_enable</qualifiedname>
        <param>
          <type>uint32_t &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Get x axis gyroscope bias correction enable data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>x axis gyroscope bias correction enable data. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Return true if reading was successful and data is valid, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="860" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classIIOWrapper_1acedff444962fb642b5d2417aaf5dd63a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IIOWrapper::update_x_axis_gyroscope_bias_correction_enable</definition>
        <argsstring>(uint32_t val)</argsstring>
        <name>update_x_axis_gyroscope_bias_correction_enable</name>
        <qualifiedname>IIOWrapper::update_x_axis_gyroscope_bias_correction_enable</qualifiedname>
        <param>
          <type>uint32_t</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Update x axis gyroscope bias correction enable. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>value to update with. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Return true if writing was with success and false if not. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="868" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classIIOWrapper_1a73fd94d29e90e9b46a5c47453e5a76a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IIOWrapper::y_axis_gyroscope_bias_correction_enable</definition>
        <argsstring>(uint32_t &amp;result)</argsstring>
        <name>y_axis_gyroscope_bias_correction_enable</name>
        <qualifiedname>IIOWrapper::y_axis_gyroscope_bias_correction_enable</qualifiedname>
        <param>
          <type>uint32_t &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Get y axis gyroscope bias correction enable data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>y axis gyroscope bias correction enable data. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Return true if reading was successful and data is valid, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="876" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classIIOWrapper_1a4a20c51a3a2079f1c7e887605f6f78dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IIOWrapper::update_y_axis_gyroscope_bias_correction_enable</definition>
        <argsstring>(uint32_t val)</argsstring>
        <name>update_y_axis_gyroscope_bias_correction_enable</name>
        <qualifiedname>IIOWrapper::update_y_axis_gyroscope_bias_correction_enable</qualifiedname>
        <param>
          <type>uint32_t</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Update y axis gyroscope bias correction enable. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>value to update with. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Return true if writing was with success and false if not. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="884" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classIIOWrapper_1a00aa6acb648e5c90038132c537649773" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IIOWrapper::z_axis_gyroscope_bias_correction_enable</definition>
        <argsstring>(uint32_t &amp;result)</argsstring>
        <name>z_axis_gyroscope_bias_correction_enable</name>
        <qualifiedname>IIOWrapper::z_axis_gyroscope_bias_correction_enable</qualifiedname>
        <param>
          <type>uint32_t &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Get z axis gyroscope bias correction enable data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>z axis gyroscope bias correction enable data. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Return true if reading was successful and data is valid, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="892" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classIIOWrapper_1a70f3f6d8b2cdefb6a5a6cff54915c6e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IIOWrapper::update_z_axis_gyroscope_bias_correction_enable</definition>
        <argsstring>(uint32_t val)</argsstring>
        <name>update_z_axis_gyroscope_bias_correction_enable</name>
        <qualifiedname>IIOWrapper::update_z_axis_gyroscope_bias_correction_enable</qualifiedname>
        <param>
          <type>uint32_t</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Update z axis gyroscope bias correction enable. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>value to update with. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Return true if writing was with success and false if not. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="900" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classIIOWrapper_1a62287c7a5dfdd731494ed7ba1780663d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IIOWrapper::x_axis_accelerometer_bias_correction_enable</definition>
        <argsstring>(uint32_t &amp;result)</argsstring>
        <name>x_axis_accelerometer_bias_correction_enable</name>
        <qualifiedname>IIOWrapper::x_axis_accelerometer_bias_correction_enable</qualifiedname>
        <param>
          <type>uint32_t &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Get x axis accelerometer bias correction enable data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>x axis accelerometer bias correction enable data. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Return true if reading was successful and data is valid, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="908" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classIIOWrapper_1a43ae9191af8bc6da154d7b301848ac41" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IIOWrapper::update_x_axis_accelerometer_bias_correction_enable</definition>
        <argsstring>(uint32_t val)</argsstring>
        <name>update_x_axis_accelerometer_bias_correction_enable</name>
        <qualifiedname>IIOWrapper::update_x_axis_accelerometer_bias_correction_enable</qualifiedname>
        <param>
          <type>uint32_t</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Update x axis accelerometer bias correction enable. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>value to update with. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Return true if writing was with success and false if not. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="916" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classIIOWrapper_1a9f393e7caf03730f7ddcd003c2556dfe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IIOWrapper::y_axis_accelerometer_bias_correction_enable</definition>
        <argsstring>(uint32_t &amp;result)</argsstring>
        <name>y_axis_accelerometer_bias_correction_enable</name>
        <qualifiedname>IIOWrapper::y_axis_accelerometer_bias_correction_enable</qualifiedname>
        <param>
          <type>uint32_t &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Get y axis accelerometer bias correction enable data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>y axis accelerometer bias correction enable data. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Return true if reading was successful and data is valid, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="924" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classIIOWrapper_1ace85be9c516ad0dce1d76700c440d0e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IIOWrapper::update_y_axis_accelerometer_bias_correction_enable</definition>
        <argsstring>(uint32_t val)</argsstring>
        <name>update_y_axis_accelerometer_bias_correction_enable</name>
        <qualifiedname>IIOWrapper::update_y_axis_accelerometer_bias_correction_enable</qualifiedname>
        <param>
          <type>uint32_t</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Update y axis accelerometer bias correction enable. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>value to update with. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Return true if writing was with success and false if not. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="932" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classIIOWrapper_1a56ca0c938bef97c190ee7ae56736fcda" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IIOWrapper::z_axis_accelerometer_bias_correction_enable</definition>
        <argsstring>(uint32_t &amp;result)</argsstring>
        <name>z_axis_accelerometer_bias_correction_enable</name>
        <qualifiedname>IIOWrapper::z_axis_accelerometer_bias_correction_enable</qualifiedname>
        <param>
          <type>uint32_t &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Get z axis accelerometer bias correction enable data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>z axis accelerometer bias correction enable data. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Return true if reading was successful and data is valid, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="940" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classIIOWrapper_1ad501d5b8096992254282b710ae3593bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IIOWrapper::update_z_axis_accelerometer_bias_correction_enable</definition>
        <argsstring>(uint32_t val)</argsstring>
        <name>update_z_axis_accelerometer_bias_correction_enable</name>
        <qualifiedname>IIOWrapper::update_z_axis_accelerometer_bias_correction_enable</qualifiedname>
        <param>
          <type>uint32_t</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Update z axis accelerometer bias correction enable. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>value to update with. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Return true if writing was with success and false if not. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="948" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classIIOWrapper_1a2da8f4f3cd36e8e2cff6befcb53ecbbe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IIOWrapper::bias_correction_update</definition>
        <argsstring>()</argsstring>
        <name>bias_correction_update</name>
        <qualifiedname>IIOWrapper::bias_correction_update</qualifiedname>
        <briefdescription>
<para>Trigger a bias correction update command. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Return true if the command was successfully triggered, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="955" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classIIOWrapper_1a2cb403633337d848e3e334460098a954" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IIOWrapper::factory_calibration_restore</definition>
        <argsstring>()</argsstring>
        <name>factory_calibration_restore</name>
        <qualifiedname>IIOWrapper::factory_calibration_restore</qualifiedname>
        <briefdescription>
<para>Trigger a factory calibration restore command. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Return true if the command was successfully triggered, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="962" column="8" bodyfile="src/iio_wrapper.cpp" bodystart="1959" bodyend="1965"/>
      </memberdef>
      <memberdef kind="function" id="classIIOWrapper_1a9063348d525f98961fca0e5a8d1b2942" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IIOWrapper::sensor_self_test</definition>
        <argsstring>()</argsstring>
        <name>sensor_self_test</name>
        <qualifiedname>IIOWrapper::sensor_self_test</qualifiedname>
        <briefdescription>
<para>Trigger a sensor self test command. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Return true if the command was successfully triggered, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="969" column="8" bodyfile="src/iio_wrapper.cpp" bodystart="1967" bodyend="1973"/>
      </memberdef>
      <memberdef kind="function" id="classIIOWrapper_1a39973a796e6e9f809b8284f011ccaa36" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IIOWrapper::flash_memory_update</definition>
        <argsstring>()</argsstring>
        <name>flash_memory_update</name>
        <qualifiedname>IIOWrapper::flash_memory_update</qualifiedname>
        <briefdescription>
<para>Trigger a flash memory update command. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Return true if the command was successfully triggered, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="976" column="8" bodyfile="src/iio_wrapper.cpp" bodystart="1975" bodyend="1981"/>
      </memberdef>
      <memberdef kind="function" id="classIIOWrapper_1af97abb3a23be70f995eb1becb1863dfb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IIOWrapper::flash_memory_test</definition>
        <argsstring>()</argsstring>
        <name>flash_memory_test</name>
        <qualifiedname>IIOWrapper::flash_memory_test</qualifiedname>
        <briefdescription>
<para>Trigger a flash memory test command. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Return true if the command was successfully triggered, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="983" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classIIOWrapper_1a06c8b2dd5e06296e6071515d42678338" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IIOWrapper::software_reset</definition>
        <argsstring>()</argsstring>
        <name>software_reset</name>
        <qualifiedname>IIOWrapper::software_reset</qualifiedname>
        <briefdescription>
<para>Trigger a software reset command. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Return true if the command was successfully triggered, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="990" column="8" bodyfile="src/iio_wrapper.cpp" bodystart="1993" bodyend="1999"/>
      </memberdef>
      <memberdef kind="function" id="classIIOWrapper_1a7ece889e328ab46d471031934eb93b33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IIOWrapper::firmware_revision</definition>
        <argsstring>(std::string &amp;result)</argsstring>
        <name>firmware_revision</name>
        <qualifiedname>IIOWrapper::firmware_revision</qualifiedname>
        <param>
          <type>std::string &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Get firmware revision value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>The firmware revision value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Return true if reading was successful and data is valid, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="998" column="8" bodyfile="src/iio_wrapper.cpp" bodystart="2001" bodyend="2011"/>
      </memberdef>
      <memberdef kind="function" id="classIIOWrapper_1a392b3968397a63a0bf235bb7515f5879" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IIOWrapper::firmware_date</definition>
        <argsstring>(std::string &amp;result)</argsstring>
        <name>firmware_date</name>
        <qualifiedname>IIOWrapper::firmware_date</qualifiedname>
        <param>
          <type>std::string &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Get firmware date value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>The firmware data value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Return true if reading was successful and data is valid, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="1006" column="8" bodyfile="src/iio_wrapper.cpp" bodystart="2013" bodyend="2023"/>
      </memberdef>
      <memberdef kind="function" id="classIIOWrapper_1a1f0c7c86eba809ac5e0505b12e7b8143" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IIOWrapper::product_id</definition>
        <argsstring>(uint32_t &amp;result)</argsstring>
        <name>product_id</name>
        <qualifiedname>IIOWrapper::product_id</qualifiedname>
        <param>
          <type>uint32_t &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Get product id value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>The product id value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Return true if reading was successful and data is valid, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="1014" column="8" bodyfile="src/iio_wrapper.cpp" bodystart="2025" bodyend="2035"/>
      </memberdef>
      <memberdef kind="function" id="classIIOWrapper_1a9d05c33bbd4eef378b584d656a56cfc7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IIOWrapper::serial_number</definition>
        <argsstring>(uint32_t &amp;result)</argsstring>
        <name>serial_number</name>
        <qualifiedname>IIOWrapper::serial_number</qualifiedname>
        <param>
          <type>uint32_t &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Get serial number value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>The serial number value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Return true if reading was successful and data is valid, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="1022" column="8" bodyfile="src/iio_wrapper.cpp" bodystart="2037" bodyend="2047"/>
      </memberdef>
      <memberdef kind="function" id="classIIOWrapper_1af2bd81f3dca62979b41cf5018f72a173" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IIOWrapper::flash_counter</definition>
        <argsstring>(uint32_t &amp;value)</argsstring>
        <name>flash_counter</name>
        <qualifiedname>IIOWrapper::flash_counter</qualifiedname>
        <param>
          <type>uint32_t &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Get flash counter value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The flash counter value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Return true if reading was successful and data is valid, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="1030" column="8" bodyfile="src/iio_wrapper.cpp" bodystart="2049" bodyend="2059"/>
      </memberdef>
      <memberdef kind="function" id="classIIOWrapper_1a45fe53b29bb3c69fd167caa42418b56e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double IIOWrapper::get_scale_accel</definition>
        <argsstring>()</argsstring>
        <name>get_scale_accel</name>
        <qualifiedname>IIOWrapper::get_scale_accel</qualifiedname>
        <briefdescription>
<para>Get scale value for linear acceleration. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Return scale value for linear acceleration. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="1036" column="10" bodyfile="src/iio_wrapper.cpp" bodystart="2061" bodyend="2061"/>
      </memberdef>
      <memberdef kind="function" id="classIIOWrapper_1a9155426d173e6adb8c6436598cab9d6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double IIOWrapper::get_scale_anglvel</definition>
        <argsstring>()</argsstring>
        <name>get_scale_anglvel</name>
        <qualifiedname>IIOWrapper::get_scale_anglvel</qualifiedname>
        <briefdescription>
<para>Get scale value for angular velocity. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Return scale value for angular velocity. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="1042" column="10" bodyfile="src/iio_wrapper.cpp" bodystart="2063" bodyend="2063"/>
      </memberdef>
      <memberdef kind="function" id="classIIOWrapper_1a0986611e409cfa128ec0f5b5429c8b72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double IIOWrapper::get_scale_deltavelocity</definition>
        <argsstring>()</argsstring>
        <name>get_scale_deltavelocity</name>
        <qualifiedname>IIOWrapper::get_scale_deltavelocity</qualifiedname>
        <briefdescription>
<para>Get scale value for delta velocity. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Return scale value for delta velocity. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="1048" column="10" bodyfile="src/iio_wrapper.cpp" bodystart="2065" bodyend="2065"/>
      </memberdef>
      <memberdef kind="function" id="classIIOWrapper_1a133f8dcccf4727d7a97ba1f708c7c249" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double IIOWrapper::get_scale_deltaangl</definition>
        <argsstring>()</argsstring>
        <name>get_scale_deltaangl</name>
        <qualifiedname>IIOWrapper::get_scale_deltaangl</qualifiedname>
        <briefdescription>
<para>Get scale value for delta angle. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Return scale value for delta angle. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="1054" column="10" bodyfile="src/iio_wrapper.cpp" bodystart="2067" bodyend="2067"/>
      </memberdef>
      <memberdef kind="function" id="classIIOWrapper_1a022888d663a4dbead44e37a84c45411b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double IIOWrapper::get_scale_temp</definition>
        <argsstring>()</argsstring>
        <name>get_scale_temp</name>
        <qualifiedname>IIOWrapper::get_scale_temp</qualifiedname>
        <briefdescription>
<para>Get scale value for temperature. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Return scale value for temperature. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="1060" column="10" bodyfile="src/iio_wrapper.cpp" bodystart="2069" bodyend="2069"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="classIIOWrapper_1aec9b699fd6110a7795a32e84343a1c1d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void IIOWrapper::setDeltaAngleScales</definition>
        <argsstring>(enum adis_device_id dev_id)</argsstring>
        <name>setDeltaAngleScales</name>
        <qualifiedname>IIOWrapper::setDeltaAngleScales</qualifiedname>
        <param>
          <type>enum adis_device_id</type>
          <declname>dev_id</declname>
        </param>
        <briefdescription>
<para>Sets manually the delta angle scales based on the device id. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device id for which the scales are set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="1067" column="8" bodyfile="src/iio_wrapper.cpp" bodystart="275" bodyend="336"/>
      </memberdef>
      <memberdef kind="function" id="classIIOWrapper_1a7287fe1ab85c9aebb746dff3baf7300d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void IIOWrapper::setDeltaVelocityScales</definition>
        <argsstring>(enum adis_device_id dev_id)</argsstring>
        <name>setDeltaVelocityScales</name>
        <qualifiedname>IIOWrapper::setDeltaVelocityScales</qualifiedname>
        <param>
          <type>enum adis_device_id</type>
          <declname>dev_id</declname>
        </param>
        <briefdescription>
<para>Sets manually the delta velocity scales based on the device id. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device id for which the scales are set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="1072" column="8" bodyfile="src/iio_wrapper.cpp" bodystart="338" bodyend="391"/>
      </memberdef>
      <memberdef kind="function" id="classIIOWrapper_1a3b99dc4a11bfc1044779befc29c9385a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IIOWrapper::updateField</definition>
        <argsstring>(uint32_t reg, uint32_t val, uint32_t mask)</argsstring>
        <name>updateField</name>
        <qualifiedname>IIOWrapper::updateField</qualifiedname>
        <param>
          <type>uint32_t</type>
          <declname>reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>val</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Update a field in the register map. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>reg</parametername>
</parameternamelist>
<parameterdescription>
<para>The register address where the field is located </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to be written. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mask</parametername>
</parameternamelist>
<parameterdescription>
<para>The bitmask to change </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Return true if updated was successful, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="1080" column="8" bodyfile="src/iio_wrapper.cpp" bodystart="260" bodyend="273"/>
      </memberdef>
      <memberdef kind="function" id="classIIOWrapper_1a47cb7f7d914c9a12c51cfaa152645b07" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IIOWrapper::getRawDeltaAngleXFromDebug</definition>
        <argsstring>(int32_t &amp;result)</argsstring>
        <name>getRawDeltaAngleXFromDebug</name>
        <qualifiedname>IIOWrapper::getRawDeltaAngleXFromDebug</qualifiedname>
        <param>
          <type>int32_t &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Get raw delta angle on x axis with register reads; in this case the retrieved samples are not necessary continuous. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Return true if the reading was successful and result is valid, false otherwise. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>The delta angle on x axis in raw format. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="1089" column="8" bodyfile="src/iio_wrapper.cpp" bodystart="718" bodyend="734"/>
      </memberdef>
      <memberdef kind="function" id="classIIOWrapper_1adde2349c207c0d885197bb11165e6546" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IIOWrapper::getRawDeltaAngleYFromDebug</definition>
        <argsstring>(int32_t &amp;result)</argsstring>
        <name>getRawDeltaAngleYFromDebug</name>
        <qualifiedname>IIOWrapper::getRawDeltaAngleYFromDebug</qualifiedname>
        <param>
          <type>int32_t &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Get raw delta angle on y axis with register reads; in this case the retrieved samples are not necessary continuous. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Return true if the reading was successful and result is valid, false otherwise. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>The delta angle on y axis in raw format. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="1098" column="8" bodyfile="src/iio_wrapper.cpp" bodystart="759" bodyend="775"/>
      </memberdef>
      <memberdef kind="function" id="classIIOWrapper_1a2f8806cda1ba466fab265a45eb66815c" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IIOWrapper::getRawDeltaAngleZFromDebug</definition>
        <argsstring>(int32_t &amp;result)</argsstring>
        <name>getRawDeltaAngleZFromDebug</name>
        <qualifiedname>IIOWrapper::getRawDeltaAngleZFromDebug</qualifiedname>
        <param>
          <type>int32_t &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Get raw delta angle on z axis with register reads; in this case the retrieved samples are not necessary continuous. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Return true if the reading was successful and result is valid, false otherwise. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>The delta angle on z axis in raw format. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="1107" column="8" bodyfile="src/iio_wrapper.cpp" bodystart="800" bodyend="816"/>
      </memberdef>
      <memberdef kind="function" id="classIIOWrapper_1a0fe6f4ff144f0c80f1452987e383318a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IIOWrapper::getRawDeltaVelocityXFromDebug</definition>
        <argsstring>(int32_t &amp;result)</argsstring>
        <name>getRawDeltaVelocityXFromDebug</name>
        <qualifiedname>IIOWrapper::getRawDeltaVelocityXFromDebug</qualifiedname>
        <param>
          <type>int32_t &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Get raw delta velocity on x axis with register reads; in this case the retrieved samples are not necessary continuous. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Return true if the reading was successful and result is valid, false otherwise. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>The delta velocity on x axis in raw format. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="1116" column="8" bodyfile="src/iio_wrapper.cpp" bodystart="841" bodyend="857"/>
      </memberdef>
      <memberdef kind="function" id="classIIOWrapper_1ae6a0f742c9dd11684e9a49fb975773e0" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IIOWrapper::getRawDeltaVelocityYFromDebug</definition>
        <argsstring>(int32_t &amp;result)</argsstring>
        <name>getRawDeltaVelocityYFromDebug</name>
        <qualifiedname>IIOWrapper::getRawDeltaVelocityYFromDebug</qualifiedname>
        <param>
          <type>int32_t &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Get raw delta velocity on y axis with register reads; in this case the retrieved samples are not necessary continuous. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Return true if the reading was successful and result is valid, false otherwise. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>The delta velocity on y axis in raw format. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="1125" column="8" bodyfile="src/iio_wrapper.cpp" bodystart="882" bodyend="898"/>
      </memberdef>
      <memberdef kind="function" id="classIIOWrapper_1a153ba949b8daa8514864b59538fcb64a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IIOWrapper::getRawDeltaVelocityZFromDebug</definition>
        <argsstring>(int32_t &amp;result)</argsstring>
        <name>getRawDeltaVelocityZFromDebug</name>
        <qualifiedname>IIOWrapper::getRawDeltaVelocityZFromDebug</qualifiedname>
        <param>
          <type>int32_t &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Get raw delta velocity on z axis with register reads; in this case the retrieved samples are not necessary continuous. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Return true if the reading was successful and result is valid, false otherwise. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>The delta velocity on z axis in raw format. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="1134" column="8" bodyfile="src/iio_wrapper.cpp" bodystart="923" bodyend="939"/>
      </memberdef>
      <memberdef kind="function" id="classIIOWrapper_1a78ff447b7bccef0dd8abc5239ddcda27" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IIOWrapper::getConvertedDeltaAngleXFromDebug</definition>
        <argsstring>(double &amp;result)</argsstring>
        <name>getConvertedDeltaAngleXFromDebug</name>
        <qualifiedname>IIOWrapper::getConvertedDeltaAngleXFromDebug</qualifiedname>
        <param>
          <type>double &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Get delta angle on x axis with register reads; in this case the retrieved samples are not necessary continuous. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Return true if the reading was successful and result is valid, false otherwise. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>The delta angle on x axis in radians. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="1143" column="8" bodyfile="src/iio_wrapper.cpp" bodystart="736" bodyend="745"/>
      </memberdef>
      <memberdef kind="function" id="classIIOWrapper_1aa52383a8d31690b73f74539cc617e7d7" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IIOWrapper::getConvertedDeltaAngleYFromDebug</definition>
        <argsstring>(double &amp;result)</argsstring>
        <name>getConvertedDeltaAngleYFromDebug</name>
        <qualifiedname>IIOWrapper::getConvertedDeltaAngleYFromDebug</qualifiedname>
        <param>
          <type>double &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Get delta angle on y axis with register reads; in this case the retrieved samples are not necessary continuous. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Return true if the reading was successful and result is valid, false otherwise. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>The delta angle on y axis in radians. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="1152" column="8" bodyfile="src/iio_wrapper.cpp" bodystart="777" bodyend="786"/>
      </memberdef>
      <memberdef kind="function" id="classIIOWrapper_1adb513e9bdd99b7fcf9accec73faba53e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IIOWrapper::getConvertedDeltaAngleZFromDebug</definition>
        <argsstring>(double &amp;result)</argsstring>
        <name>getConvertedDeltaAngleZFromDebug</name>
        <qualifiedname>IIOWrapper::getConvertedDeltaAngleZFromDebug</qualifiedname>
        <param>
          <type>double &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Get delta angle on z axis with register reads; in this case the retrieved samples are not necessary continuous. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Return true if the reading was successful and result is valid, false otherwise. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>The delta angle on z axis in radians. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="1161" column="8" bodyfile="src/iio_wrapper.cpp" bodystart="818" bodyend="827"/>
      </memberdef>
      <memberdef kind="function" id="classIIOWrapper_1afae369c43ec0dfdb08f41e173b968f58" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IIOWrapper::getConvertedDeltaVelocityXFromDebug</definition>
        <argsstring>(double &amp;result)</argsstring>
        <name>getConvertedDeltaVelocityXFromDebug</name>
        <qualifiedname>IIOWrapper::getConvertedDeltaVelocityXFromDebug</qualifiedname>
        <param>
          <type>double &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Get delta velocity on x axis with register reads; in this case the retrieved samples are not necessary continuous. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Return true if the reading was successful and result is valid, false otherwise. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>The delta velocity on x axis in m / s. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="1170" column="8" bodyfile="src/iio_wrapper.cpp" bodystart="859" bodyend="868"/>
      </memberdef>
      <memberdef kind="function" id="classIIOWrapper_1a93c0f0e87624cc045bf571ed8d85911b" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IIOWrapper::getConvertedDeltaVelocityYFromDebug</definition>
        <argsstring>(double &amp;result)</argsstring>
        <name>getConvertedDeltaVelocityYFromDebug</name>
        <qualifiedname>IIOWrapper::getConvertedDeltaVelocityYFromDebug</qualifiedname>
        <param>
          <type>double &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Get delta velocity on y axis with register reads; in this case the retrieved samples are not necessary continuous. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Return true if the reading was successful and result is valid, false otherwise. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>The delta velocity on y axis in m / s. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="1179" column="8" bodyfile="src/iio_wrapper.cpp" bodystart="900" bodyend="909"/>
      </memberdef>
      <memberdef kind="function" id="classIIOWrapper_1a9adcb8752a2895affbab03ea3d1e2ef0" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IIOWrapper::getConvertedDeltaVelocityZFromDebug</definition>
        <argsstring>(double &amp;result)</argsstring>
        <name>getConvertedDeltaVelocityZFromDebug</name>
        <qualifiedname>IIOWrapper::getConvertedDeltaVelocityZFromDebug</qualifiedname>
        <param>
          <type>double &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Get delta velocity on z axis with register reads; in this case the retrieved samples are not necessary continuous. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Return true if the reading was successful and result is valid, false otherwise. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>The delta velocity on z axis in m / s. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/adi_imu/iio_wrapper.h" line="1188" column="8" bodyfile="src/iio_wrapper.cpp" bodystart="941" bodyend="950"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Wrapper class for libiio library for IMU devices. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="include/adi_imu/iio_wrapper.h" line="35" column="1" bodyfile="include/adi_imu/iio_wrapper.h" bodystart="36" bodyend="1285"/>
    <listofallmembers>
      <member refid="classIIOWrapper_1a45cbee4a2eaf700b7396a4df956ed7e8" prot="public" virt="non-virtual"><scope>IIOWrapper</scope><name>accel_x_calibbias</name></member>
      <member refid="classIIOWrapper_1ab069f082479643718588962ed76e48e9" prot="public" virt="non-virtual"><scope>IIOWrapper</scope><name>accel_y_calibbias</name></member>
      <member refid="classIIOWrapper_1a777c78d431b5fc16088018b52ffa8d3a" prot="public" virt="non-virtual"><scope>IIOWrapper</scope><name>accel_z_calibbias</name></member>
      <member refid="classIIOWrapper_1a2cc98e4d4a651e82c7d5766f824acebd" prot="public" virt="non-virtual"><scope>IIOWrapper</scope><name>anglvel_x_calibbias</name></member>
      <member refid="classIIOWrapper_1aafec41ed9294cf0ef6ac0afaf350188e" prot="public" virt="non-virtual"><scope>IIOWrapper</scope><name>anglvel_y_calibbias</name></member>
      <member refid="classIIOWrapper_1a84a5ecfbf0942fa175703f1a0aee8bcd" prot="public" virt="non-virtual"><scope>IIOWrapper</scope><name>anglvel_z_calibbias</name></member>
      <member refid="classIIOWrapper_1a4b0d75039f36c1063c12c2335c230ffd" prot="public" virt="non-virtual"><scope>IIOWrapper</scope><name>bias_correction_time_base_control</name></member>
      <member refid="classIIOWrapper_1a2da8f4f3cd36e8e2cff6befcb53ecbbe" prot="public" virt="non-virtual"><scope>IIOWrapper</scope><name>bias_correction_update</name></member>
      <member refid="classIIOWrapper_1aa56bb91153c46ef51c3d3d53a68cc423" prot="public" virt="non-virtual"><scope>IIOWrapper</scope><name>createContext</name></member>
      <member refid="classIIOWrapper_1a6f0b68bf91bb6bd000a570b349a4e9f4" prot="public" virt="non-virtual"><scope>IIOWrapper</scope><name>diag_acceleration_self_test_error</name></member>
      <member refid="classIIOWrapper_1aa691849d0baa2fad55deb7975a070734" prot="public" virt="non-virtual"><scope>IIOWrapper</scope><name>diag_aduc_mcu_fault</name></member>
      <member refid="classIIOWrapper_1aa81282a7f07974ef69c65711200f5d7a" prot="public" virt="non-virtual"><scope>IIOWrapper</scope><name>diag_automatic_reset</name></member>
      <member refid="classIIOWrapper_1a09e0a223d200b7d2ed1731f06635b370" prot="public" virt="non-virtual"><scope>IIOWrapper</scope><name>diag_clock_error</name></member>
      <member refid="classIIOWrapper_1a11b581d355f708591f0e425507d93164" prot="public" virt="non-virtual"><scope>IIOWrapper</scope><name>diag_crc_error</name></member>
      <member refid="classIIOWrapper_1aacdab905284a0a6ecabb1b9bcad81be9" prot="public" virt="non-virtual"><scope>IIOWrapper</scope><name>diag_data_path_overrun</name></member>
      <member refid="classIIOWrapper_1a39396f6d69a04202f9e859922f95fc34" prot="public" virt="non-virtual"><scope>IIOWrapper</scope><name>diag_flash_memory_test_error</name></member>
      <member refid="classIIOWrapper_1a9950dc38bc1e56a7fc42d36b50a3e718" prot="public" virt="non-virtual"><scope>IIOWrapper</scope><name>diag_flash_memory_update_error</name></member>
      <member refid="classIIOWrapper_1ab3a551d7da672e3c5d3cce79aac4a37c" prot="public" virt="non-virtual"><scope>IIOWrapper</scope><name>diag_flash_memory_write_count_exceeded_error</name></member>
      <member refid="classIIOWrapper_1aea94b1e579314660c7dd03d82ee4c29f" prot="public" virt="non-virtual"><scope>IIOWrapper</scope><name>diag_gyroscope1_self_test_error</name></member>
      <member refid="classIIOWrapper_1aa85c0d7dbb01ff4201678d687b8adf93" prot="public" virt="non-virtual"><scope>IIOWrapper</scope><name>diag_gyroscope2_self_test_error</name></member>
      <member refid="classIIOWrapper_1ac818ead3ccd5f2a7c8ab59f5464cff9a" prot="public" virt="non-virtual"><scope>IIOWrapper</scope><name>diag_sensor_initialization_failure</name></member>
      <member refid="classIIOWrapper_1a6c7b7b8d0039a24ed6be2ce7b15fc814" prot="public" virt="non-virtual"><scope>IIOWrapper</scope><name>diag_sensor_self_test_error</name></member>
      <member refid="classIIOWrapper_1a1d23815c0de4a1ad4366602a4f4bdd96" prot="public" virt="non-virtual"><scope>IIOWrapper</scope><name>diag_spi_communication_error</name></member>
      <member refid="classIIOWrapper_1a88df8843b74de7c177dada4d61708fc4" prot="public" virt="non-virtual"><scope>IIOWrapper</scope><name>diag_standby_mode</name></member>
      <member refid="classIIOWrapper_1afd7976cbd87ab425eb6fdf1192e39e1b" prot="public" virt="non-virtual"><scope>IIOWrapper</scope><name>diag_x_axis_accelerometer_failure</name></member>
      <member refid="classIIOWrapper_1a45143fbc3eba8260f9cda6870c704d19" prot="public" virt="non-virtual"><scope>IIOWrapper</scope><name>diag_x_axis_gyroscope_failure</name></member>
      <member refid="classIIOWrapper_1a5e040011fba86b221a028f96440ac59e" prot="public" virt="non-virtual"><scope>IIOWrapper</scope><name>diag_y_axis_accelerometer_failure</name></member>
      <member refid="classIIOWrapper_1ab027802372011c7f7d9f59061017173c" prot="public" virt="non-virtual"><scope>IIOWrapper</scope><name>diag_y_axis_gyroscope_failure</name></member>
      <member refid="classIIOWrapper_1adf039156a53b8bb0afebe4c48507c097" prot="public" virt="non-virtual"><scope>IIOWrapper</scope><name>diag_z_axis_accelerometer_failure</name></member>
      <member refid="classIIOWrapper_1adc4a32825bc5982131f53e227805946b" prot="public" virt="non-virtual"><scope>IIOWrapper</scope><name>diag_z_axis_gyroscope_failure</name></member>
      <member refid="classIIOWrapper_1a2cb403633337d848e3e334460098a954" prot="public" virt="non-virtual"><scope>IIOWrapper</scope><name>factory_calibration_restore</name></member>
      <member refid="classIIOWrapper_1aee4ed59f8c41d2c1e1ad95d5179e0e61" prot="public" virt="non-virtual"><scope>IIOWrapper</scope><name>filter_low_pass_3db_frequency</name></member>
      <member refid="classIIOWrapper_1a392b3968397a63a0bf235bb7515f5879" prot="public" virt="non-virtual"><scope>IIOWrapper</scope><name>firmware_date</name></member>
      <member refid="classIIOWrapper_1a7ece889e328ab46d471031934eb93b33" prot="public" virt="non-virtual"><scope>IIOWrapper</scope><name>firmware_revision</name></member>
      <member refid="classIIOWrapper_1af2bd81f3dca62979b41cf5018f72a173" prot="public" virt="non-virtual"><scope>IIOWrapper</scope><name>flash_counter</name></member>
      <member refid="classIIOWrapper_1af97abb3a23be70f995eb1becb1863dfb" prot="public" virt="non-virtual"><scope>IIOWrapper</scope><name>flash_memory_test</name></member>
      <member refid="classIIOWrapper_1a39973a796e6e9f809b8284f011ccaa36" prot="public" virt="non-virtual"><scope>IIOWrapper</scope><name>flash_memory_update</name></member>
      <member refid="classIIOWrapper_1a45fe53b29bb3c69fd167caa42418b56e" prot="public" virt="non-virtual"><scope>IIOWrapper</scope><name>get_scale_accel</name></member>
      <member refid="classIIOWrapper_1a9155426d173e6adb8c6436598cab9d6b" prot="public" virt="non-virtual"><scope>IIOWrapper</scope><name>get_scale_anglvel</name></member>
      <member refid="classIIOWrapper_1a133f8dcccf4727d7a97ba1f708c7c249" prot="public" virt="non-virtual"><scope>IIOWrapper</scope><name>get_scale_deltaangl</name></member>
      <member refid="classIIOWrapper_1a0986611e409cfa128ec0f5b5429c8b72" prot="public" virt="non-virtual"><scope>IIOWrapper</scope><name>get_scale_deltavelocity</name></member>
      <member refid="classIIOWrapper_1a022888d663a4dbead44e37a84c45411b" prot="public" virt="non-virtual"><scope>IIOWrapper</scope><name>get_scale_temp</name></member>
      <member refid="classIIOWrapper_1ab98be528a5805d948e0cbf8c81bdac26" prot="public" virt="non-virtual"><scope>IIOWrapper</scope><name>getBuffAngularVelocityX</name></member>
      <member refid="classIIOWrapper_1a530c457c0cd4d81951b7d174072fd75b" prot="public" virt="non-virtual"><scope>IIOWrapper</scope><name>getBuffAngularVelocityY</name></member>
      <member refid="classIIOWrapper_1a4d5286b33d41295f1cc6567f67b4d6d2" prot="public" virt="non-virtual"><scope>IIOWrapper</scope><name>getBuffAngularVelocityZ</name></member>
      <member refid="classIIOWrapper_1a24d03c22a08baf0c5209d7f31c9d0533" prot="public" virt="non-virtual"><scope>IIOWrapper</scope><name>getBuffLinearAccelerationX</name></member>
      <member refid="classIIOWrapper_1a809c113401e38fdf0fc660735a2192e1" prot="public" virt="non-virtual"><scope>IIOWrapper</scope><name>getBuffLinearAccelerationY</name></member>
      <member refid="classIIOWrapper_1a41e760380fa5036a652201e2df50c889" prot="public" virt="non-virtual"><scope>IIOWrapper</scope><name>getBuffLinearAccelerationZ</name></member>
      <member refid="classIIOWrapper_1a4a4cea0c85854aef0117ce98a587b8b4" prot="public" virt="non-virtual"><scope>IIOWrapper</scope><name>getBuffSampleTimestamp</name></member>
      <member refid="classIIOWrapper_1a8636bc7c28c829538d05d5bb638c9074" prot="public" virt="non-virtual"><scope>IIOWrapper</scope><name>getBuffTemperature</name></member>
      <member refid="classIIOWrapper_1a188e946663bc7b97c34051307f4d5d27" prot="public" virt="non-virtual"><scope>IIOWrapper</scope><name>getConvertedAngularVelocityX</name></member>
      <member refid="classIIOWrapper_1a1f3f03307a91115e17ee3f18323f061a" prot="public" virt="non-virtual"><scope>IIOWrapper</scope><name>getConvertedAngularVelocityY</name></member>
      <member refid="classIIOWrapper_1adc9f70fada12dbe6e110a8bcddf6c539" prot="public" virt="non-virtual"><scope>IIOWrapper</scope><name>getConvertedAngularVelocityZ</name></member>
      <member refid="classIIOWrapper_1a68420aad14da02a7fd8316b6c7853c03" prot="public" virt="non-virtual"><scope>IIOWrapper</scope><name>getConvertedDeltaAngleX</name></member>
      <member refid="classIIOWrapper_1a78ff447b7bccef0dd8abc5239ddcda27" prot="private" virt="non-virtual"><scope>IIOWrapper</scope><name>getConvertedDeltaAngleXFromDebug</name></member>
      <member refid="classIIOWrapper_1a58453b95cb9193b5b2813fd3c1f5e4d7" prot="public" virt="non-virtual"><scope>IIOWrapper</scope><name>getConvertedDeltaAngleY</name></member>
      <member refid="classIIOWrapper_1aa52383a8d31690b73f74539cc617e7d7" prot="private" virt="non-virtual"><scope>IIOWrapper</scope><name>getConvertedDeltaAngleYFromDebug</name></member>
      <member refid="classIIOWrapper_1a29160e4f1947315e1862bf1c1a0630bc" prot="public" virt="non-virtual"><scope>IIOWrapper</scope><name>getConvertedDeltaAngleZ</name></member>
      <member refid="classIIOWrapper_1adb513e9bdd99b7fcf9accec73faba53e" prot="private" virt="non-virtual"><scope>IIOWrapper</scope><name>getConvertedDeltaAngleZFromDebug</name></member>
      <member refid="classIIOWrapper_1a6ef7ac4cd9d2b1b7e0cd9a7a44e6dd35" prot="public" virt="non-virtual"><scope>IIOWrapper</scope><name>getConvertedDeltaVelocityX</name></member>
      <member refid="classIIOWrapper_1afae369c43ec0dfdb08f41e173b968f58" prot="private" virt="non-virtual"><scope>IIOWrapper</scope><name>getConvertedDeltaVelocityXFromDebug</name></member>
      <member refid="classIIOWrapper_1ad566dd23cded258dea92a16a88946902" prot="public" virt="non-virtual"><scope>IIOWrapper</scope><name>getConvertedDeltaVelocityY</name></member>
      <member refid="classIIOWrapper_1a93c0f0e87624cc045bf571ed8d85911b" prot="private" virt="non-virtual"><scope>IIOWrapper</scope><name>getConvertedDeltaVelocityYFromDebug</name></member>
      <member refid="classIIOWrapper_1a31a1dc7c03fc782b2eff9ae0f925e789" prot="public" virt="non-virtual"><scope>IIOWrapper</scope><name>getConvertedDeltaVelocityZ</name></member>
      <member refid="classIIOWrapper_1a9adcb8752a2895affbab03ea3d1e2ef0" prot="private" virt="non-virtual"><scope>IIOWrapper</scope><name>getConvertedDeltaVelocityZFromDebug</name></member>
      <member refid="classIIOWrapper_1ad1c329ac2d3785a4c4ceee754d5b1c7c" prot="public" virt="non-virtual"><scope>IIOWrapper</scope><name>getConvertedLinearAccelerationX</name></member>
      <member refid="classIIOWrapper_1a798839e37670a3ee83381c3b8e7bee9d" prot="public" virt="non-virtual"><scope>IIOWrapper</scope><name>getConvertedLinearAccelerationY</name></member>
      <member refid="classIIOWrapper_1a63262c6685e600d505fc751db4f52f4e" prot="public" virt="non-virtual"><scope>IIOWrapper</scope><name>getConvertedLinearAccelerationZ</name></member>
      <member refid="classIIOWrapper_1a23f8fbda995629b864dc72bcf3ba0984" prot="public" virt="non-virtual"><scope>IIOWrapper</scope><name>getConvertedTemperature</name></member>
      <member refid="classIIOWrapper_1a47cb7f7d914c9a12c51cfaa152645b07" prot="private" virt="non-virtual"><scope>IIOWrapper</scope><name>getRawDeltaAngleXFromDebug</name></member>
      <member refid="classIIOWrapper_1adde2349c207c0d885197bb11165e6546" prot="private" virt="non-virtual"><scope>IIOWrapper</scope><name>getRawDeltaAngleYFromDebug</name></member>
      <member refid="classIIOWrapper_1a2f8806cda1ba466fab265a45eb66815c" prot="private" virt="non-virtual"><scope>IIOWrapper</scope><name>getRawDeltaAngleZFromDebug</name></member>
      <member refid="classIIOWrapper_1a0fe6f4ff144f0c80f1452987e383318a" prot="private" virt="non-virtual"><scope>IIOWrapper</scope><name>getRawDeltaVelocityXFromDebug</name></member>
      <member refid="classIIOWrapper_1ae6a0f742c9dd11684e9a49fb975773e0" prot="private" virt="non-virtual"><scope>IIOWrapper</scope><name>getRawDeltaVelocityYFromDebug</name></member>
      <member refid="classIIOWrapper_1a153ba949b8daa8514864b59538fcb64a" prot="private" virt="non-virtual"><scope>IIOWrapper</scope><name>getRawDeltaVelocityZFromDebug</name></member>
      <member refid="classIIOWrapper_1aa3dfbe95f0013016b8b5056b73d1f126" prot="public" virt="non-virtual"><scope>IIOWrapper</scope><name>gyroscope_measurement_range</name></member>
      <member refid="classIIOWrapper_1ae9b4506c5a6cb9d56e36d11c3d4fc56e" prot="public" virt="non-virtual"><scope>IIOWrapper</scope><name>IIOWrapper</name></member>
      <member refid="classIIOWrapper_1a25e63a463289dc1c7761e9ef14982cbf" prot="public" virt="non-virtual"><scope>IIOWrapper</scope><name>internal_sensor_bandwidth</name></member>
      <member refid="classIIOWrapper_1a2352785dfb0a0324613bd6f99a27831b" prot="public" virt="non-virtual"><scope>IIOWrapper</scope><name>linear_acceleration_compensation</name></member>
      <member refid="classIIOWrapper_1ac1fb844f82d64a1b6e2e6cc6c089bd71" prot="private" virt="non-virtual"><scope>IIOWrapper</scope><name>m_channel_accel_x</name></member>
      <member refid="classIIOWrapper_1ad1e0779435221c690f93d6d05a76f176" prot="private" virt="non-virtual"><scope>IIOWrapper</scope><name>m_channel_accel_y</name></member>
      <member refid="classIIOWrapper_1aa5f24dc01a83090154c57359a4668cd9" prot="private" virt="non-virtual"><scope>IIOWrapper</scope><name>m_channel_accel_z</name></member>
      <member refid="classIIOWrapper_1a9b7c68d2cd7161e853b261c3e1363ef3" prot="private" virt="non-virtual"><scope>IIOWrapper</scope><name>m_channel_anglvel_x</name></member>
      <member refid="classIIOWrapper_1a1b138c4cc8238e52a68f830363a04b8d" prot="private" virt="non-virtual"><scope>IIOWrapper</scope><name>m_channel_anglvel_y</name></member>
      <member refid="classIIOWrapper_1a1b2384d209272000f673f25e7134d06d" prot="private" virt="non-virtual"><scope>IIOWrapper</scope><name>m_channel_anglvel_z</name></member>
      <member refid="classIIOWrapper_1ae585f76ba5a1e003c9416bc87d5d7897" prot="private" virt="non-virtual"><scope>IIOWrapper</scope><name>m_channel_deltaangl_x</name></member>
      <member refid="classIIOWrapper_1a60cc79165edc458ad3af03ad976feb2d" prot="private" virt="non-virtual"><scope>IIOWrapper</scope><name>m_channel_deltaangl_y</name></member>
      <member refid="classIIOWrapper_1a7f9f033ffb31d35240723713a9769a6b" prot="private" virt="non-virtual"><scope>IIOWrapper</scope><name>m_channel_deltaangl_z</name></member>
      <member refid="classIIOWrapper_1a13c3a4d31efdd2d329b3acc14b697aa4" prot="private" virt="non-virtual"><scope>IIOWrapper</scope><name>m_channel_deltavelocity_x</name></member>
      <member refid="classIIOWrapper_1a7fba21deedbdc14adf0f4a46cb59fdff" prot="private" virt="non-virtual"><scope>IIOWrapper</scope><name>m_channel_deltavelocity_y</name></member>
      <member refid="classIIOWrapper_1a38e16f0f6f97028d0eee31b7e98d40aa" prot="private" virt="non-virtual"><scope>IIOWrapper</scope><name>m_channel_deltavelocity_z</name></member>
      <member refid="classIIOWrapper_1a49a1068fef0e2c1c48096f6b88d103b7" prot="private" virt="non-virtual"><scope>IIOWrapper</scope><name>m_channel_temp</name></member>
      <member refid="classIIOWrapper_1a335fdbf54f6ea1f463b4b7e9e74e0cc8" prot="private" virt="non-virtual"><scope>IIOWrapper</scope><name>m_channel_timestamp</name></member>
      <member refid="classIIOWrapper_1aa54f78cb0c53f73b6562e303367b20be" prot="private" virt="non-virtual"><scope>IIOWrapper</scope><name>m_dev</name></member>
      <member refid="classIIOWrapper_1ac6c3cec6da827146507437ee27296a96" prot="private" virt="non-virtual"><scope>IIOWrapper</scope><name>m_dev_buffer</name></member>
      <member refid="classIIOWrapper_1a4c656678d45e8e978480712451b69649" prot="private" virt="non-virtual"><scope>IIOWrapper</scope><name>m_dev_trigger</name></member>
      <member refid="classIIOWrapper_1aef4fe3a3f93085da695bf65639f09b87" prot="private" virt="non-virtual"><scope>IIOWrapper</scope><name>m_iio_context</name></member>
      <member refid="classIIOWrapper_1ac4a267304bf82229d032adf4c167c8be" prot="private" virt="non-virtual"><scope>IIOWrapper</scope><name>m_scale_accel_x</name></member>
      <member refid="classIIOWrapper_1a39297415934efc288f6ced765861d19d" prot="private" virt="non-virtual"><scope>IIOWrapper</scope><name>m_scale_accel_y</name></member>
      <member refid="classIIOWrapper_1a62c70c9017644054942d0a27c5582291" prot="private" virt="non-virtual"><scope>IIOWrapper</scope><name>m_scale_accel_z</name></member>
      <member refid="classIIOWrapper_1a60201aaf24995e68520d846c5446cd23" prot="private" virt="non-virtual"><scope>IIOWrapper</scope><name>m_scale_anglvel_x</name></member>
      <member refid="classIIOWrapper_1aabb94da5ca0c007e066898cd7767f5a2" prot="private" virt="non-virtual"><scope>IIOWrapper</scope><name>m_scale_anglvel_y</name></member>
      <member refid="classIIOWrapper_1acdb2f23b02ac0650e12b76a02502e725" prot="private" virt="non-virtual"><scope>IIOWrapper</scope><name>m_scale_anglvel_z</name></member>
      <member refid="classIIOWrapper_1a9d05021dd126ae2446d4bfc8e122d926" prot="private" virt="non-virtual"><scope>IIOWrapper</scope><name>m_scale_deltaangl_x</name></member>
      <member refid="classIIOWrapper_1a0a614ad2a77e11186da5c6d22743c1cc" prot="private" virt="non-virtual"><scope>IIOWrapper</scope><name>m_scale_deltaangl_y</name></member>
      <member refid="classIIOWrapper_1aa60f12b53d29ad7a17750da6cfe56a9b" prot="private" virt="non-virtual"><scope>IIOWrapper</scope><name>m_scale_deltaangl_z</name></member>
      <member refid="classIIOWrapper_1a6b769d1cfe0c7e2f09d7af4cdbea5c09" prot="private" virt="non-virtual"><scope>IIOWrapper</scope><name>m_scale_deltavelocity_x</name></member>
      <member refid="classIIOWrapper_1a5f29b5ac8ea9c50f38059626899f45ab" prot="private" virt="non-virtual"><scope>IIOWrapper</scope><name>m_scale_deltavelocity_y</name></member>
      <member refid="classIIOWrapper_1a822cfeb7635264d647df73dabd2ec4d6" prot="private" virt="non-virtual"><scope>IIOWrapper</scope><name>m_scale_deltavelocity_z</name></member>
      <member refid="classIIOWrapper_1ac33c30566920a17f9f0b20321c7bb4ae" prot="private" virt="non-virtual"><scope>IIOWrapper</scope><name>m_scale_temp</name></member>
      <member refid="classIIOWrapper_1a67eaded963621b47f1f228a0b250a00e" prot="public" virt="non-virtual"><scope>IIOWrapper</scope><name>point_of_percussion_alignment</name></member>
      <member refid="classIIOWrapper_1a1f0c7c86eba809ac5e0505b12e7b8143" prot="public" virt="non-virtual"><scope>IIOWrapper</scope><name>product_id</name></member>
      <member refid="classIIOWrapper_1ac8584252d4635e9a3c00f464cc176b17" prot="public" virt="non-virtual"><scope>IIOWrapper</scope><name>sampling_frequency</name></member>
      <member refid="classIIOWrapper_1a9063348d525f98961fca0e5a8d1b2942" prot="public" virt="non-virtual"><scope>IIOWrapper</scope><name>sensor_self_test</name></member>
      <member refid="classIIOWrapper_1a9d05c33bbd4eef378b584d656a56cfc7" prot="public" virt="non-virtual"><scope>IIOWrapper</scope><name>serial_number</name></member>
      <member refid="classIIOWrapper_1aec9b699fd6110a7795a32e84343a1c1d" prot="private" virt="non-virtual"><scope>IIOWrapper</scope><name>setDeltaAngleScales</name></member>
      <member refid="classIIOWrapper_1a7287fe1ab85c9aebb746dff3baf7300d" prot="private" virt="non-virtual"><scope>IIOWrapper</scope><name>setDeltaVelocityScales</name></member>
      <member refid="classIIOWrapper_1a06c8b2dd5e06296e6071515d42678338" prot="public" virt="non-virtual"><scope>IIOWrapper</scope><name>software_reset</name></member>
      <member refid="classIIOWrapper_1a807ef883b1b5a6119ce4ab75d21985c5" prot="public" virt="non-virtual"><scope>IIOWrapper</scope><name>stopBufferAcquisition</name></member>
      <member refid="classIIOWrapper_1a371075c2f73786fc409dbfe11bb9b68f" prot="public" virt="non-virtual"><scope>IIOWrapper</scope><name>update_accel_calibbias_x</name></member>
      <member refid="classIIOWrapper_1a6b81ddc7f9f7c67b15e4f8be594c0926" prot="public" virt="non-virtual"><scope>IIOWrapper</scope><name>update_accel_calibbias_y</name></member>
      <member refid="classIIOWrapper_1a4265bcbf41f4c0582e08f30f5ab63eca" prot="public" virt="non-virtual"><scope>IIOWrapper</scope><name>update_accel_calibbias_z</name></member>
      <member refid="classIIOWrapper_1a09fa5c163037f078a83e813ef13f73e9" prot="public" virt="non-virtual"><scope>IIOWrapper</scope><name>update_anglvel_calibbias_x</name></member>
      <member refid="classIIOWrapper_1a3730f3c7dcea63f4e2104a02c1e695ae" prot="public" virt="non-virtual"><scope>IIOWrapper</scope><name>update_anglvel_calibbias_y</name></member>
      <member refid="classIIOWrapper_1a640785a86e54405eecad55a93321bc26" prot="public" virt="non-virtual"><scope>IIOWrapper</scope><name>update_anglvel_calibbias_z</name></member>
      <member refid="classIIOWrapper_1a5818afde806f78c0868884d6b1f23bbf" prot="public" virt="non-virtual"><scope>IIOWrapper</scope><name>update_bias_correction_time_base_control</name></member>
      <member refid="classIIOWrapper_1ab960b56f3b8fb3bab2f4d3e492616bca" prot="public" virt="non-virtual"><scope>IIOWrapper</scope><name>update_filter_low_pass_3db_frequency</name></member>
      <member refid="classIIOWrapper_1a630b1d5232285b51560a90b805339961" prot="public" virt="non-virtual"><scope>IIOWrapper</scope><name>update_internal_sensor_bandwidth</name></member>
      <member refid="classIIOWrapper_1a09fe16394d6d8b7a7ab7dbefa64ba084" prot="public" virt="non-virtual"><scope>IIOWrapper</scope><name>update_linear_acceleration_compensation</name></member>
      <member refid="classIIOWrapper_1a293d23f39cf1a07b3e8056d239728dc3" prot="public" virt="non-virtual"><scope>IIOWrapper</scope><name>update_point_of_percussion_alignment</name></member>
      <member refid="classIIOWrapper_1a5cf1f0bfc5f5f0cf43c9707f399c2001" prot="public" virt="non-virtual"><scope>IIOWrapper</scope><name>update_sampling_frequency</name></member>
      <member refid="classIIOWrapper_1a43ae9191af8bc6da154d7b301848ac41" prot="public" virt="non-virtual"><scope>IIOWrapper</scope><name>update_x_axis_accelerometer_bias_correction_enable</name></member>
      <member refid="classIIOWrapper_1acedff444962fb642b5d2417aaf5dd63a" prot="public" virt="non-virtual"><scope>IIOWrapper</scope><name>update_x_axis_gyroscope_bias_correction_enable</name></member>
      <member refid="classIIOWrapper_1ace85be9c516ad0dce1d76700c440d0e7" prot="public" virt="non-virtual"><scope>IIOWrapper</scope><name>update_y_axis_accelerometer_bias_correction_enable</name></member>
      <member refid="classIIOWrapper_1a4a20c51a3a2079f1c7e887605f6f78dc" prot="public" virt="non-virtual"><scope>IIOWrapper</scope><name>update_y_axis_gyroscope_bias_correction_enable</name></member>
      <member refid="classIIOWrapper_1ad501d5b8096992254282b710ae3593bf" prot="public" virt="non-virtual"><scope>IIOWrapper</scope><name>update_z_axis_accelerometer_bias_correction_enable</name></member>
      <member refid="classIIOWrapper_1a70f3f6d8b2cdefb6a5a6cff54915c6e1" prot="public" virt="non-virtual"><scope>IIOWrapper</scope><name>update_z_axis_gyroscope_bias_correction_enable</name></member>
      <member refid="classIIOWrapper_1ae179fe95e80ad6624c6782de04c854ed" prot="public" virt="non-virtual"><scope>IIOWrapper</scope><name>updateBuffer</name></member>
      <member refid="classIIOWrapper_1a3b99dc4a11bfc1044779befc29c9385a" prot="private" virt="non-virtual"><scope>IIOWrapper</scope><name>updateField</name></member>
      <member refid="classIIOWrapper_1a62287c7a5dfdd731494ed7ba1780663d" prot="public" virt="non-virtual"><scope>IIOWrapper</scope><name>x_axis_accelerometer_bias_correction_enable</name></member>
      <member refid="classIIOWrapper_1ab0d834e0075c408c546991934ac4ac7a" prot="public" virt="non-virtual"><scope>IIOWrapper</scope><name>x_axis_gyroscope_bias_correction_enable</name></member>
      <member refid="classIIOWrapper_1a9f393e7caf03730f7ddcd003c2556dfe" prot="public" virt="non-virtual"><scope>IIOWrapper</scope><name>y_axis_accelerometer_bias_correction_enable</name></member>
      <member refid="classIIOWrapper_1a73fd94d29e90e9b46a5c47453e5a76a7" prot="public" virt="non-virtual"><scope>IIOWrapper</scope><name>y_axis_gyroscope_bias_correction_enable</name></member>
      <member refid="classIIOWrapper_1a56ca0c938bef97c190ee7ae56736fcda" prot="public" virt="non-virtual"><scope>IIOWrapper</scope><name>z_axis_accelerometer_bias_correction_enable</name></member>
      <member refid="classIIOWrapper_1a00aa6acb648e5c90038132c537649773" prot="public" virt="non-virtual"><scope>IIOWrapper</scope><name>z_axis_gyroscope_bias_correction_enable</name></member>
      <member refid="classIIOWrapper_1ab4e9232cf3ba9539db8e4bfac2e0ebf0" prot="public" virt="non-virtual"><scope>IIOWrapper</scope><name>~IIOWrapper</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
